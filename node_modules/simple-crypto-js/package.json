{
  "_from": "simple-crypto-js",
  "_id": "simple-crypto-js@2.0.2",
  "_inBundle": false,
  "_integrity": "sha1-gHX+D/qYT3ACfdPhSKJA8mA3Msk=",
  "_location": "/simple-crypto-js",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "simple-crypto-js",
    "fetchSpec": "latest",
    "name": "simple-crypto-js",
    "raw": "simple-crypto-js",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/simple-crypto-js/-/simple-crypto-js-2.0.2.tgz",
  "_shasum": "8075fe0ffa984f70027dd3e148a240f2603732c9",
  "_shrinkwrap": null,
  "_spec": "simple-crypto-js",
  "_where": "/Users/siddhant/Desktop/csc648-su18-Team03-sirfeedsalot",
  "author": {
    "name": "https://github.com/danang-id"
  },
  "bundleDependencies": false,
  "dependencies": {
    "crypto-js": "^3.1.9-1"
  },
  "deprecated": false,
  "description": "Simplify AES encryption and decryption of any JavaScript objects, implementing crypto-js library.",
  "devDependencies": {
    "@types/chai": "^4.1.3",
    "@types/crypto-js": "^3.1.39",
    "@types/mocha": "^5.2.0",
    "chai": "^4.1.2",
    "coveralls": "^3.0.1",
    "gulp": "^3.9.1",
    "gulp-typescript": "^4.0.2",
    "mocha": "^5.2.0",
    "nyc": "^11.8.0",
    "ts-node": "^6.0.5",
    "typescript": "^2.8.3"
  },
  "homepage": "https://github.com/danang-id/simple-crypto-js",
  "license": "MIT",
  "main": "src/SimpleCrypto.js",
  "name": "simple-crypto-js",
  "optionalDependencies": {},
  "readme": "# SimpleCrypto 2.0.2\n\n\n[![GitHub Release](https://img.shields.io/github/release/danang-id/simple-crypto-js.svg)](https://github.com/danang-id/simple-crypto-js/releases)\n[![Build Status](https://travis-ci.org/danang-id/simple-crypto-js.svg?branch=master)](https://travis-ci.org/danang-id/simple-crypto-js) \n[![Coverage Status](https://coveralls.io/repos/github/danang-id/simple-crypto-js/badge.svg?branch=master)](https://coveralls.io/github/danang-id/simple-crypto-js?branch=master)\n[![Dependencies Status](https://img.shields.io/david/danang-id/simple-crypto-js.svg)](https://www.npmjs.com/package/simple-crypto-js?activeTab=dependencies)\n[![DevDependencies Status](https://img.shields.io/david/dev/danang-id/simple-crypto-js.svg)](https://www.npmjs.com/package/simple-crypto-js?activeTab=dependencies)\n\n[![NPM Version](https://img.shields.io/npm/v/simple-crypto-js.svg)](https://www.npmjs.com/package/simple-crypto-js?activeTab=versions)\n[![License](https://img.shields.io/npm/l/simple-crypto-js.svg)](#license)\n[![Monthly Downloads](https://img.shields.io/npm/dm/simple-crypto-js.svg)](https://www.npmjs.com/package/simple-crypto-js)\n\n**_SimpleCrypto_** is a JavaScript library that simplify the process of encryption and decryption of JavaScript objects, as simple as just calling `encrypt()` and `decrypt()` function. This library implements brix's [crypto-js](https://github.com/brix/crypto-js) library. This library is pure JavaScript library built with TypeScript targeting CommonJS ECMAScript 5 (ES5), so it is compatible with most NodeJS back-end applications or JavaScript front-end (client browser).\n\n## List of Contents\n\n* [SimpleCrypto 2.0.2](#simplecrypto-201)\n  * [List of Contents](#list-of-contents)\n  * [Changes Log (What's New)](#changes-log-whats-new)\n  * [Getting Started](#getting-started)\n    * [Installation](#installation)\n  * [Documentation](#documentation)\n    * [SimpleCrypto Class](#simplecrypto-class)\n    * [Using `encrypt()` and `decrypt()`](#using-encrypt-and-decrypt)\n    * [Working on Multiple Instances](#working-on-multiple-instances)\n    * [Change the Secret Key](#change-the-secret-key)\n    * [Object Encryption](#object-encryption)\n    * [Random Key Generator](#random-key-generator)\n  * [Built With](#built-with)\n  * [Contribution](#contribution)\n  * [Versioning](#versioning)\n  * [Authors](#authors)\n  * [License](#license)\n  * [Acknowledgments](#acknowledgments)\n\n## Changes Log (What's New)\n\n**What's New in 2.0.2**\n\n* Bugs fixed\n\n**Included from 2.0.1**\n\n* Add coverage service\n\n**Included from 2.0.0**\n\n* Using only these functions to encrypt or decrypt: `encrypt()` and `decrypt()` (accepts string, object, number, or boolean data type). Function `encryptObject()` and `decryptObject()` is in deprecation as these functions are enough.\n* Securing instance's properties from public access. Access to instance properties, like `instance.secret`, is not allowed anymore.\n* New TypeScript definition file of this library is now available.\n* Fixed documentation (typos, diction, etc).\n* For contributor: Using `mocha`, `chai` and `coveralls` to create full unit-testing of the library. You could see testing result on top of this README.\n* For contributor: Using `gulp` to compile the TypeScript source code into JavaScript ES5.\n\n## Getting Started\n\nThis library is availabe through package manager ([npm](https://www.npmjs.org/) and [yarn](https://www.yarnpkg.com/)) and through [CDN](https://cdn.jsdelivr.net/npm/simple-crypto-js@2.0.2/src/SimpleCrypto.js).\n\n### Installation\n\nTo get this library included on your project, first, you can use package manager like [npm](https://www.npmjs.org/) or [yarn](https://www.yarnpkg.com/) command to get **_SimpleCrypto_**.\n\n```bash\n# If you're using NPM\nnpm install --save simple-crypto-js\n\n# If you're using Yarn\nyarn add simple-crypto-js\n```\n\nThen, include **_SimpleCrypto_** your project. If you are using the new ECMAScript 6 (ECMAScript 2015) and later, you may use the new import statement:\n\n```javascript\n// ES6 and later\nimport SimpleCrypto from \"simple-crypto-js\";\n```\n\nHowever, if you are using ECMAScript 5 and older, use the require statement:\n\n```javascript\n// ES5 and older\nvar SimpleCrypto = require(\"simple-crypto-js\").default;\n```\n\n## Documentation\n\n**_SimpleCrypto_** has a single class with only two instance's functions and a single static function. This is by intention to keep it's simplicity. This is full documentation about the library and how to use it on your project. All examples work on both ECMAScript 6 (and later) and ECMAScript 5 (and older).\n\n### SimpleCrypto Class\n\nList of **_SimpleCrypto_** constructor parameter.\n\n| Parameter | Type     | Information                                                                                                           | Default     |\n| --------- | -------- | --------------------------------------------------------------------------------------------------------------------- | ----------- |\n| _secret_  | required | The secret string (key or password) that will be used to create the secret key for encryption and decryption process. | _undefined_ |\n\nList of **_SimpleCrypto_** instance's properties.\n\n| Property       | Information                                                                                                                    | Default     |\n| -------------- | ------------------------------------------------------------------------------------------------------------------------------ | ----------- |\n| \\__secret_     | Contains the secret string (key or password) that will be used to create the secret key for encryption and decryption process. | _undefined_ |\n| \\__keySize_    | Contains a number that represent the size of the secret key.                                                                   | 256         |\n| \\__iterations_ | Contains a number that represent the number of iterations done to create the secret key.                                       | 100         |\n\nList of **_SimpleCrypto_** functions.\n\n| Functions                                                     | Information                                                                            | Parameter                                                                                                                                                                                                                                                                                                                                             | Return                                                                                                           |\n| ------------------------------------------------------------- | -------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------- |\n| _static_ **generateRandom()**                                 | Generate a random string based on the key length.                                      | _length_: number (optional) - The length of key used to generating random. (default: `128`) </br> _expectsWordArray_: boolean (optional) - If set to `true`, this function will return a `CryptoJS.WordArray` instance instead of string. (default: `false`)                                                                                          | _random_: string - Generated random key.                                                                         |\n| **encrypt()**                                                 | Encrypt data.                                                                          | **data**: object/string/number/boolean - The data to be encrypted.                                                                                                                                                                                                                                                                                    | _ciphered_: string - Ciphered data.                                                                              |\n| **decrypt()**                                                 | Decrypt ciphered data.                                                                 | **ciphered**: string - Ciphered data to be decrypted. </br> _expectsObject_: boolean (optional) - If set to `true`, this function will return an object instead of string. Set to `true` if decrypted data is expected as object. (default: `false`) </br> _enc_: string (optional) - Encoding method used to bring the data back. (default: `UTF-8`) | _data_: string/object - The decrypted data (it might be string or object, depends on `expectsObject` parameter). |\n| _deprecation_ **encryptObject()**</br>use `encrypt()` instead | Encrypt JavaScript object literal.                                                     | **object**: object - The object to be enrypted.                                                                                                                                                                                                                                                                                                       | _ciphered_: string - Ciphered data.                                                                              |\n| _deprecation_ **decryptObject()**</br>use `decrypt()` instead | Decrypt ciphered data that is expected as object and turn it back into object literal. | **ciphered**: string - Ciphered data to be decrypted. </br> _enc_: string (optional) - Encoding method used to bring the data back. (default: `UTF-8`)                                                                                                                                                                                                | _object_: object - The decrypted object.                                                                         |\n| **setSecret()** | Change the secret of the instance. | **secret**: string - The new secret string.                                                                                                                                                                                                 | _void_                                                                        |\n\nNote:\n\n1.  Function marked with _static_ indicating a static function.\n2.  Function marked with _deprecation_ indicating deprecated function that still can be used. However, it would be deprecated (and fully gone) in future version.\n3.  Function marked with _deprecated_ indicating deprecated function that has been removed in this version of release.\n4.  The rest (not marked with anything) are normal instance's functions.\n\n### Using `encrypt()` and `decrypt()`\n\nTo use **_SimpleCrypto_**, first create a **_SimpleCrypto_** instance with a secret key (password). Secret key parameter **MUST be defined** when creating a **_SimpleCrypto_** instance.\n\nTo encrypt and decrypt data, simply use `encrypt()` and `decrypt()` function from an instance. This will use AES-CBC encryption algorithm.\n\n```javascript\n// If you would like to generate a random unique key, you may use static function generateRandom() like so\n// var _secretKey = SimpleCrypto.generateRandom();\n// You may also set the strength of the random key, as example 256 (default is 128);\n// var _secretKey = SimpleCrypto.generateRandom(256);\n// Or just defined the key by yourself (key is must!)\nvar _secretKey = \"some-unique-key\";\n\nvar simpleCrypto = new SimpleCrypto(_secretKey);\n\nvar plainText = \"Hello World!\";\nvar chiperText = simpleCrypto.encrypt(plainText);\nconsole.log(\"Encryption process...\");\nconsole.log(\"Plain Text    : \" + plainText);\nconsole.log(\"Cipher Text   : \" + cipherText);\nvar decipherText = simpleCrypto.decrypt(cipherText);\nconsole.log(\"... and then decryption...\");\nconsole.log(\"Decipher Text : \" + decipherText);\nconsole.log(\"... done.\");\n```\n\n### Working on Multiple Instances\n\nYou could also perform the encryption and decryption process using different **_SimpleCrypto_** instances, **PROVIDED THAT the secret key ARE STAY THE SAME between the instances**. For example:\n\n```javascript\nvar _secretKey = \"some-unique-key\";\nvar simpleCrypto1 = new SimpleCrypto(_secretKey);\nvar simpleCrypto2 = new SimpleCrypto(_secretKey);\n\nvar plainText = \"Hello World!\";\n// Encryption using the first instance (simpleCrypto1)\nvar chiperText = simpleCrypto1.encrypt(plainText);\nconsole.log(\"Encryption process...\");\nconsole.log(\"Plain Text    : \" + plainText);\nconsole.log(\"Cipher Text   : \" + cipherText);\n// Decyption using the second instance (simpleCrypto2)\nvar decipherText = simpleCrypto2.decrypt(cipherText);\nconsole.log(\"... and then decryption...\");\nconsole.log(\"Decipher Text : \" + decipherText);\nconsole.log(\"... done.\");\n```\n\n### Change the Secret Key\n\nIf you want to change the secret key of a **_SimpleCrypto_** instance, call the `setSecret()` function with the new secret as paramter.\n\n```javascript\nvar simpleCrypto = new SimpleCrypto(\"some-unique-key\");\nsimpleCrypto.setSecret(\"new-more-unique-key\");\n```\n\nOn version 1.1.1 and before, you may programmatically get and set the secret using it's `secret` property. However, since version 2.0, direct access to instance's properties are deprecated. You can't get the `secret` property programmatically, but still allowed to re-set the secret using the `setSecret()` function.\n\n### Object Encryption\n\nEncryption and decryption of JavaScript object literal has never been simpler than this. \n\nTo encrypt and decrypt JavaScript object literal, simply use `encrypt()` and `decrypt()` function from an instance. This will use AES-CBC encryption algorithm.\n\n\n```javascript\nvar _secretKey = SimpleCrypto.generateRandom();\nvar simpleCrypto = new SimpleCrypto(_secretKey);\n\nvar object = {\n  SimpleCrypto: \"is great.\",\n  You: \"should try it!\"\n};\nvar encrypted = simpleCrypto.encrypt(plainObject);\nconsole.log(\"Encryption process...\");\nconsole.log(\"Plain Object     : \" + plainObject);\nconsole.log(\"Encrypted Object : \" + encrypted);\n// Set the second paramter to true, then it will return object instead of string\nvar decrypted = simpleCrypto.decrypt(encrypted, true);\nconsole.log(\"... and then decryption...\");\nconsole.log(\"Decrypted object : \" + decrypted);\nconsole.log(\"... done.\");\n```\n\nOn version 1.1.1 and before, you might have use `encryptObject()` and `decryptObject()` function. In version 2.0, this function is in `deprecation` and soon would be gone in future release. This is because our goal is to keep the simplicity and a single function is enough to do encryption or decryption process.\n\n### Random Key Generator\n\nAnywhere, after importing **_SimpleCrypto_**, you may use static function `generateRandom()` to produce a random key based on the length of key you have provided on the parameter (default is `128`).\n\n```javascript\nvar randomString = SimpleCrypto.generateRandom();\nvar randomStringCustomKey = SimpleCrypto.generateRandom(256);\n```\n\nYes, and of course it is obvious, because it is a static function, you are not required to create any SimpleCrypto instances.\n\n## Built With\n\nWritten in [TypeScript](https://typscriptlang.org/), built into ECMAScript 5.\n\n## Contribution\n\nTo contribute, simply fork this project, and issue a pull request.\n\n## Versioning\n\nWe use [SemVer](http://semver.org/) for versioning. For the versions available, see the [tags on this repository](https://github.com/danang-id/simple-crypto-js/tags).\n\n## Authors\n\n* **Danang Galuh Tegar Prasetyo** - _Initial work_ - [danang-id](https://github.com/danang-id)\n\nSee also the list of [contributors](https://github.com/danang-id/simple-crypto-js/contributors) who participated in this project.\n\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details\n\n## Acknowledgments\n\n* This library was developed to support and simplify the [Secure Cookies](https://github.com/danang-id/secure-cookies) library.\n* Made available by open source and of course brix's [crypto-js](https://github.com/brix/crypto-js) library\n",
  "readmeFilename": "README.md",
  "scripts": {
    "build": "gulp scripts",
    "coverage": "nyc report --reporter=text-lcov | coveralls",
    "test": "nyc mocha --reporter spec --require ts-node/register 'test/**/*.test.ts'",
    "test:watch": "nyc mocha --watch --reporter spec --require ts-node/register 'test/**/*.test.ts'"
  },
  "version": "2.0.2"
}
