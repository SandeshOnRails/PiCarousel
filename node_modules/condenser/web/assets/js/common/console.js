(function (window, undefined) {
  function Cache (size) {
    this.cache = [];
    this.size = size;
    return this;
  }
  Cache.prototype = {
    constructor: Cache,
    add: function (data) {
      this.cache.push(data);
      while(this.cache.length > this.size) {
        this.cache.shift();
      }
      return this;
    },
    use: function (handle) {
      this.cache.forEach(handle);
      return this;
    }
  };
  function Board (id, width, height, min, max, left, top, zIndex, headerColor, bodyColor, textColor, lineColor) {
    var board = this.board = document.createElement('canvas');
    board.id = id;
    board.style.position = 'fixed';
    board.style.left = left + 'px';
    board.style.top = top + 'px';
    board.style.zIndex = zIndex;
    board.style.boxShadow = '0 0 5px 0 rgba(0,0,0,.75)';
    this.headerColor = headerColor;
    this.bodyColor = bodyColor;
    this.textColor = textColor;
    this.lineColor = lineColor;
    this.lineWidth = 2;
    
    var view = this.view = {
      ox: 0,
      ex: width
    };
    view.toy = view.ley = 20;
    view.tey = 0;
    view.loy = height
    this.range = {
      max: max,
      min: min
    };
    this.width = board.width = width;
    this.height = board.height = height;
    this.ctx = board.getContext('2d');
    this.cache = new Cache(width / this.lineWidth);
    return this;
  }
  Board.prototype = {
    constructor: Board,
    draw: function (data) {
      this.clear();
      this._drawTitle(data);
      var self = this;
      var lineWidth = this.lineWidth;
      var view = this.view;
      var ox = view.ox;
      var oy = view.loy;
      var ex = view.ex;
      var ey = view.ley;
      var ctx = this.ctx;
      ctx.fillStyle = this.bodyColor;
      ctx.fillRect(ox, ey, ex - ox, oy - ey);
      ctx.fillStyle = null;
      ctx.beginPath();
      ctx.strokeWidth = this.lineWidth;
      ctx.strokeStyle = this.lineColor;
      ctx.moveTo(ox, oy);
      this.cache.add(data).use(function (data, i) {
        var val = data.value;
        ctx.lineTo(ox + lineWidth * i, oy - (val - self.range.min) / (self.range.max - self.range.min) * (oy - ey));
      });
      ctx.stroke();
      ctx.lineWidth = ctx.strokeStyle = null;
    },
    _drawTitle: function (data) {
      var ctx = this.ctx;
      var view = this.view;
      var ox = view.ox;
      var oy = view.toy;
      var ex = view.ex;
      var ey = view.tey;
      ctx.fillStyle = this.headerColor;
      ctx.fillRect(ox, ey, ex - ox, oy - ey);
      ctx.fillStyle = this.textColor;
      ctx.fillText(data.text, ox + 5, ey + 15);
      ctx.fillStyle = null;
    },
    clear: function () {
      this.ctx.clearRect(0, 0, this.width, this.height);
    }
  };
  var wss = (function (src) {
    var STATUS = {
      OPEN: WebSocket.prototype.OPEN,
      CLOSED: WebSocket.prototype.CLOSED,
      CONNECTING: WebSocket.prototype.CONNECTING,
      CLOSING: WebSocket.prototype.CLOSING
    };
    var wss = {
      status: STATUS.CLOSED,
      messageStack: [],
      send: function (message) {
        wss.messageStack.push(message);
        if (wss.status === STATUS.OPEN) {
          while(wss.messageStack.length) {
            wss.server.send(wss.messageStack.shift());
          }
        }
      }
    };
    var address = 'ws://' + location.hostname + ':12345/?client=view';
    wss.server = new WebSocket(address);  
    wss.server.addEventListener('open', function () {
      wss.status = STATUS.OPEN;
      console.log('connected at %s', address);
    });
    document.addEventListener('readystatechange', function (e) {
      if (document.readyState == "complete") {
        wss.ready();
      }
    });
    wss.ready = function () {
      for (var i in wss.ready.list) {
        'function' === typeof wss.ready.list[i] && wss.ready.list[i]();
      }
    };
    wss.ready.list = [];
    
    wss.clients = {};

    var WIDTH = 140;
    var HEIGHT = 100;
    var FPS = new Board('WSS_FPS', WIDTH, HEIGHT, 0, 60, 15, 15, 100, 'rgba(0,0,34,.75)', 'rgba(0,0,0,.75)', 'rgba(0,255,255,1)', 'rgba(0,255,255,1)');
    var SPF = new Board('WSS_SPF', WIDTH, HEIGHT, 0, 1000, 15, HEIGHT + 30, 100, 'rgba(0,34,0,.75)', 'rgba(0,0,0,.75)', 'rgba(0,255,0,1)', 'rgba(0,255,0,1)');
    wss.ready.list.push(function () {
      document.body.appendChild(FPS.board);
      document.body.appendChild(SPF.board);
    });
    wss.cmds = {
      fps: function (frame, time) {
        var _fps = Math.ceil(frame / time * 1000);
        var _spf = Math.ceil(time / frame);
        if (_fps > FPS.range.max) {
          _fps = FPS.range.max;
        }
        if (_spf < FPS.range.min) {
          _spf = FPS.range.min;
        }
        if (_spf > SPF.range.max) {
          _spf = SPF.range.max;
        }
        if (_spf < SPF.range.min) {
          _spf = SPF.range.min;
        }
        FPS.draw({
          text: _fps + " FPS (" + FPS.range.min + "-" + FPS.range.max + ")",
          value: _fps
        });
        SPF.draw({
          text: _spf + " MS (" + SPF.range.min + "-" + SPF.range.max + ")",
          value: _spf
        });
      },
      clients: function (clients) {
        
      }
    };
    wss.helper = {
      color: function (r, g, b, a) {
        r = r || this.random(80, 210) | 0;
        g = g || this.random(80, 210) | 0;
        b = b || this.random(80, 210) | 0;
        a = a || this.random(0.4, 1);
        return 'rgba('+r+','+g+','+b+','+a+')';
      },
      random: function (min, max) {
        min = min || 0;
        max = max || 1;
        return min + Math.random() * (max-min);
      },
      merge: function (f, t) {
        for(var i in t) {
          f[i] = t[i];
        }
        return f;
      }
    };
    wss.server.addEventListener('message', function (evt) {
      try {
        var msg = (new Function('return ' + (evt.data + '').replace(/\\/g, '\\\\')))();
        if (console[msg.cmd]) {
          return console[msg.cmd].apply(console, msg.args);
        } 
        if (wss.cmds[msg.cmd]) {
          return wss.cmds[msg.cmd].apply(wss, msg.args);
        }
        msg.args.unshift(msg.cmd);
        msg.args.unshift('%s: ');
        console.log.apply(console, msg.args);
      } catch (e) {
        console.error(e);
        console.log(evt.data);
      }
    });
    return wss;
  })();

  window.wss = wss;
  wss.send2client = function (cmd, id) {
    if (id) {
      wss.send(JSON.stringify({
        id: id,
        msg: cmd
      }));
    } else {
      wss.send(cmd);
    }
  };
})(window)