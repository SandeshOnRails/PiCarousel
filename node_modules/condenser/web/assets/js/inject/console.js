(function (window, undefined) {
if (window.wss && window.wss.send) {
  return false;
}
try {
  var ADDRESS = window.$ADDRESS$;
  var SOCKET_ADDRESS = 'ws://' + ADDRESS + '/?client=client';
  var COMET_ADDRESS = 'http://' + ADDRESS + '/comet/connect?client=client';
  var STATUS = {
    OPEN: WebSocket.prototype.OPEN, //1
    CLOSED: WebSocket.prototype.CLOSED, // 3
    CONNECTING: WebSocket.prototype.CONNECTING, //0
    CLOSING: WebSocket.prototype.CLOSING//2
  };
  var _ = window.console;
  _.log('websocket address is %s and comet address is %s ', SOCKET_ADDRESS, COMET_ADDRESS);
  var Comet = (function () {
    function Comet (address) {
      this.address = address;
      var self = this;
      function beforeunload (e) {
        window.wss.status = STATUS.CLOSED;
        return "中断连接！请继续！";
      }
      window.wss.status = STATUS.OPEN;
      window.addEventListener('beforeunload', beforeunload, false);
      window.addEventListener('unload', beforeunload, false);
    }
    Comet.prototype.send = function (msg) {
      var xhr = this.xhr = new XMLHttpRequest();
      function readystatechange (e) {
        if (xhr.readyState == 4 && xhr.status == 200) {
          var script = xhr.responseText;
          xhr.onload = xhr.onreadystatuschange = null;
          try {
            window.eval(script);
          } catch(e) {
            window.console.error(e);
          }
        }
      }

      xhr.onload = xhr.onreadystatuschange = readystatechange;
      var data = new FormData;
      data.append('msg',msg);
      xhr.open("POST", this.address, true);
      xhr.send(data);
    };
    return Comet;
  })();
  // wss bind
  var wss = (function () {
    var wss = {
      status: STATUS.CLOSED,
      messageStack: [],
      send: function (message) {
        wss.messageStack.push(message);
        if (wss.status === STATUS.OPEN) {
          while(wss.messageStack.length) {
            wss.server.send(wss.messageStack.shift());
          }
        }
      },
      readylist: []
    };
    return wss;
  })();
  
  /**
   * 一般的工具函数
   */
  var Util = (function (Util) {
    Util.makeArray = function (arrLike, from, to) {
      return wss.messageStack.slice.call(arrLike, from, to);
    };
    Util.typeOf = function (o) {
      try {
        return Util.toString.call(o)
      } catch (e) {
        return '[object Object]';
      }
    };
    Util.type = function (o) {
      return Util.typeOf(o).match(/^\[object ([a-z]+)\]$/i)[1];
    };
    Util.isElement = function (o) {
      return Util.isHTMLCollection(o) || Util.isNodeList(o) || Util.isHTMLElement(o);
    };
    Util.isHTMLElement = function (o) {
      return o.nodeName && Util.type(o) === 'HTML'+o.nodeName.substr(0, 1) + o.nodeName.substr(1).toLowerCase()+'Element';
    };
    'String Number Boolean Function Array Object RegExp Error HTMLCollection NodeList'.split(' ').forEach(function (name) {
      Util['is'+name] = function (o) {
        return Util.type(o) === name;
      };
    });
    Util.forEach = function (o, fn, context) {
      if (o.forEach) {
        return o.forEach(fn, context);
      }
      for (var i in o) {
        fn.call(context || o[i], o[i], i, o);
      }
    };
    Util.format = function () {
      var args = Util.makeArray(arguments, 1);
      str = str.replace(/(\%[a-z])/ig, function (s, m) {
        return Util.stringify(args.shift());
      });
      while (args.length) {
        str += ' ' + Util.stringify(args.shift());
      }
      return str;
    };
    Util.stringify = function (o) {
      var type = Util.type(o);
      switch (type) {
        case 'Boolean': 
        case 'RegExp':
        case 'Function':
        case 'Number': {
          return o.toString();
        }
        case 'Date': {
          return '"' + o.getFullYear() + 
            '-' + 
            fixlength(o.getMonth() + 1, 2) + 
            '-' + 
            fixlength(o.getDate(), 2) + 
            ' ' +
            fixlength(o.getHours(), 2) +
            ':' +
            fixlength(o.getMinutes(), 2) + 
            ':' +
            fixlength(o.getSeconds(), 2) + 
            '"';
        }
        case 'Error': {
          return '"Error Message:\n\r' + o.message + '\n\rStackInfo:\n\r' + o.stack + '"';
        }
        case 'Object': {
          var ret = [];
          Util.forEach(o, function (v,n) {
            ret.push('"' + n + '":' + Util.stringify(v));
          });
          return '{' + ret.join(',')+ '}';
        }
        case 'Array': 
        case 'NodeList':
        case 'HTMLCollection': {
          var ret = [];
          Util.forEach(o, function (v) {
            ret.push(Util.stringify(v));
          });
          return '['+ret.join(',')+']';
        }
        default: {
          try {
            JSON.parse(o);
            return o;
          } catch(e) {
            return '"' + o + '"';            
          }
        }
      };
    };
    Util.merge = function (f, t) {
      for (var i in t) {
        f[i] = t[i];
      }
      return f;
    }
    return Util;
    function fixlength (s, l) {
      var sl = l - (''+s).length;
      if (sl <=0 ) {
        return s;
      }
      return new Array(sl + 1).join(0) + s;
    }
  })({});
  var Console = (function (_) {
    function Console () {}
    Console.prototype.__proto__ = _.__proto__;
    // console.log(xxx,xxx);
    // => send('console.log.apply(console, [])');
    Util.forEach('log debug error exception warn info dir dirxml'.split(' '), function (n) {
      Console.prototype[n] = function (cmd) {
        var args = Util.makeArray(arguments, 1);
        var matched;
        if (cmd && cmd.match && (matched = cmd.match(/^cmd_(.*)$/)) && matched[1]) {
          wss.send(Util.stringify({
            cmd: matched[1],
            args: args 
          }));
        } else {
          args.unshift(cmd);
          wss.send(Util.stringify({
            cmd: n,
            args: args
          }));
        }
      };
    });
    return Console;
  })(_);
  var FPS = (function () {
    var requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame || function (handle) {
      var start = Date.now();
      return window.setTimeout(function () {
        handle(Date.now() - start);
      }, 1000 / 60);
    };
    var cancelAnimationFrame = window.cancelAnimationFrame || window.mozCancelAnimationFrame || window.webkitCancelAnimationFrame || window.msCancelAnimationFrame || function (id) {
      return window.clearTimeout(id);
    };
    function AnimationFrame () {};
    AnimationFrame.prototype = {
      constructor: AnimationFrame,
      start: function () {
        this._count = 0;
        this._frame = 0;
        this.stop();
        this._id = requestAnimationFrame(this._handle.bind(this));
      },
      stop: function () {
        try {
          cancelAnimationFrame(this._id);
        } catch (e) {
          this._id = null;
          delete this._id;
        }
      },
      _handle: function (time) {
        var count = time / 1000 | 0;
        ++this._frame;
        if (count > this._count) {
          this._count = count;
          console.log('cmd_fps', this._frame, time);
        }
        this._id = requestAnimationFrame(this._handle.bind(this));
      }
    };
    return new AnimationFrame;
  })();

  var Gesure = (function () {
    function getTouchInfo (touchChanged) {
      var time = +Date.now();
      return Util.makeArray(touchChanged).map(function (touch) {
        return Util.merge({
          timeStamp: time
        }, touch);
      });
    }
    function Gesure (target) {
      this.target = target;
      this.cache = [];
      this._touchEnterHandler = this._touchStartHandler = this._touchStartHandler.bind(this);
      this._touchMoveHandler = this._touchMoveHandler.bind(this);
      this._touchCancelHandler = this._touchLeaveHandler = this._touchEndHandler = this._touchEndHandler.bind(this);
      target && this.recoard(target);
    }
    Gesure.prototype = {
      constructor: Gesure,
      recoard: function (target, threshold) {
        // 1 => 0.01
        // 10 => 0.1
        // zero as default
        this.threshold = threshold / 100  || 0;
        'touchStart touchMove touchEnd touchEnter touchCancel touchLeave'.split(' ').forEach(function (name) {
          target.addEventListener(name.toLowerCase(), this['_'+name + 'Handler'], false);
        }, this);
      },
      pause: function (target) {
        'touchStart touchMove touchEnd touchEnter touchCancel touchLeave'.split(' ').forEach(function (name) {
          target.removeEventListener(name.toLowerCase(), this['_'+name + 'Handler'], false);
        }, this);
      },
      _touchEndHandler: function (e) {
        this.cache.push(getTouchInfo(e.changedTouches));
        this._compress(this.threshold);
      },
      _touchMoveHandler: function (e) {
        this.cache.push(getTouchInfo(e.changedTouches));
      },
      _touchStartHandler: function (e) {
        (this.cache = []).push(getTouchInfo(e.changedTouches));
      },
      _compress: function (threshold) {
        var ret = this.cache.splice(0);
        if (!threshold) {
          console.log('cmd_gesure', ret);
        } else {
          // todo
        }
      }
    };
    return Gesure;
  })();


  window.wss = wss;
  wss.Gesure = Gesure;
  wss.gesure = new Gesure;
  wss.util = Util;
  wss.Comet = Comet;
  wss.FPS = FPS;

  wss.readylist.push(function () {
    wss.server = new WebSocket(SOCKET_ADDRESS);
    wss.server.addEventListener('error', function (evt) {
      wss.status = STATUS.CLOSED;
      // alert('Error: ' + evt.message + evt.stack);
    }, false);
    wss.server.addEventListener('close', function (evt) {
      // wss.status = STATUS.CLOSED;
      wss.server = new Comet(COMET_ADDRESS);
      // alert('closed '+address+' \n\rcode: '+ evt.code +'\r\n reason: ' + evt.reason + "\n\rwas clean: " + evt.wasClean);
    }, false);
    wss.server.addEventListener('open', function () {
      wss.status = STATUS.OPEN;
      _.log('connected at %s', SOCKET_ADDRESS);
    }, false);
    wss.server.addEventListener('message', function (evt) {
      try {
        window.eval(evt.data);
      } catch (e) {
        window.console.error(e);
      }
    }, false);
  });
  wss.readylist.push(function () {
    wss.gesure.recoard(window);
    wss.FPS.start();
    document.addEventListener('visibilitychange', function () {
      var stat = document.visibilityState;
      if (!stat || stat === 'visible') {
        wss.FPS.start();
      } else {
        wss.FPS.stop();
      }
    }, false);
  });

  window.addEventListener('error', function (e) {
    console.error(e);
    _.error(e);
  });
  window.console = new Console;
  function readystatechange (e) {
    if (document.readyState == 'complete') {
      while(wss.readylist.length) {
        wss.readylist.shift()();
      }
      document.removeEventListener('readystatechange', readystatechange, false);
    }
  }
  document.addEventListener('readystatechange', readystatechange, false);
} catch(e) {alert(e.message + e.stack)}
})(window);