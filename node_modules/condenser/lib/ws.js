#!/usr/bin/env node
var WebSocket = require('ws');
var util = require('util');
var events = require('events');
var guid = require(__dirname + '/guid.js')();
var url = require('url');
var path = require('path');
var debug = require('debug')('condenser:ws');

function qs (urlstr) {
  var options = {};
  (url.parse(urlstr).query || '').split('&').map(function (str) {
    str = str.split('=');
    str[1] && (options[str[0]] = decodeURIComponent(str[1]));
  });
  return options;
}

function WebSocketServer (server) {
  if (!(this instanceof WebSocketServer)) {
    return new WebSocketServer(server);
  }
  this.wss = WebSocket.createServer({
    server: server
  });
  server.on('connection', function (socket) {
    socket.setTimeout(100000);
  });
  this.wss.on('connection', this.handle.bind(this));
  // 数据终端
  this._clients = {};
  // 接收终端
  this._views = {};
}
util.inherits(WebSocketServer, events.EventEmitter);
WebSocketServer.prototype.handle = function (client) {
  var upgradeReq = client.upgradeReq;
  // console.log(upgradeReq, require('url').parse(upgradeReq.url, true));

  var query = qs(upgradeReq.url);
  var id = client.id = guid(query.client || 'client');
  var self = this;
  debug('\x1B[32m=>%s \x1B[39m : \x1B[33m connected \x1B[39m', id);
  if (query.client === 'view') {
    self._views[id] = client;
    client.on('close', function () {
      debug('\x1B[32m<=%s \x1B[39m : \x1B[33m closed \x1B[39m', id);
      self._views[id] = null;
      delete self._views[id];
    });
    client.on('message', function (msg) {
      debug('\x1B[32m<=%s \x1B[39m : \x1B[36m %s \x1B[39m', id, msg);
      try {
        var executed = (new Function('return ' + (msg + '').replace(/\\/,'\\\\')))();
        self._clients[executed.id].send(executed.msg);
      } catch (err) {
        self.send2client(msg);
      }
    });
  } else {
    self._clients[id] = client;
    client.on('close', function () {
      debug('\x1B[32m=>%s \x1B[39m : \x1B[33m closed \x1B[39m', id);
      self._clients[id] = null;
      delete self._clients[id];
      self.send2view('{"cmd": "close","args": ["'+id+'"]}');
    });
    client.on('message', function (msg) {
      debug('\x1B[32m=>%s \x1B[39m : \x1B[36m %s \x1B[39m', id, msg);
      self.send2view(msg);
    });
  }
  this.send2view('{"cmd": "log","args": ["Linked in clients %o and views %o !",'+JSON.stringify(Object.keys(this._clients))+','+JSON.stringify(Object.keys(this._views))+']}');
};
WebSocketServer.prototype.send2view = function (msg) {
  if (null == msg) {return }
  this.emit('send2view', msg);
  for (var cid in this._views) {
    this._views[cid].send(msg);
  }
};
WebSocketServer.prototype.send2client = function (msg) {
  if (null == msg) {return}
  this.emit('send2client', msg);
  for (var cid in this._clients) {
    this._clients[cid].send(msg);
  }
};
WebSocketServer.prototype.connect = WebSocket.connect;
exports = module.exports = WebSocketServer;