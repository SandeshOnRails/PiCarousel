var mapping = {'/aaa/a': 'a.html',
    '/aaa/b/c': 'bucunzai.html',   //映射到不存在的内容
    '/aaa/b': 'a.html',
    '/aaa/c': 'xx/yy/zz/a.html',
    '/aaa/d/e': 'a.html',
    '/bbb' : 'aaa'     //目录映射
};
var assert = require('assert');
var path = require('path');
var prjDir = path.join(__dirname, 'jspage');
var mappedFile = require('../lib/jspage.js').mappedFile;


describe('JsPage', function(){
    describe('#mappedFile()', function(){
        it('应该正确的返回映射结果', function(){
            assert.equal(mappedFile('/aaasdfasfasd', prjDir, mapping), null);
            assert.equal(mappedFile('/aaa/a', prjDir, mapping), 'a.html');
            assert.equal(mappedFile('/aaa/b/c', prjDir, mapping), null);
            assert.equal(mappedFile('/aaa/b', prjDir, mapping), 'a.html');
            assert.equal(mappedFile('/aaa/c', prjDir, mapping), 'xx/yy/zz/a.html');
            assert.equal(mappedFile('/aaa/b/bucunzai', prjDir, mapping), null);
            assert.deepEqual(mappedFile('/aaa/d', prjDir, mapping), [{name: 'e', isDir: false}]);
            assert.equal(mappedFile('/aaa/d/e', prjDir, mapping), 'a.html');
            assert.deepEqual(mappedFile('/aaa', prjDir, mapping), [{name: 'rengong', isDir: true},{name: 'a', isDir: false},{name: 'b', isDir: false},{name: 'c', isDir: false},{name: 'd', isDir: true}]);
            assert.deepEqual(mappedFile('/bbb/rengong', prjDir, mapping), [{name : 'ttt', isDir: false}]);
            assert.deepEqual(mappedFile('/bbb/rengong/ttt', prjDir, mapping), 'aaa/rengong/ttt');
            assert.deepEqual(mappedFile('/aaa/rengong/ttt', prjDir, mapping), 'aaa/rengong/ttt');
            assert.deepEqual(mappedFile('/xx', prjDir, mapping), [{name: 'yy', isDir: true}]);
            assert.deepEqual(mappedFile('/', prjDir, mapping), [{name: "a.html", isDir: false},{name: "aaa", isDir: true},{name:"xx", isDir: true},{name: "bbb", isDir:true}]);
            assert.deepEqual(mappedFile('/bbb', prjDir, mapping),[{name: 'rengong', isDir: true}]);
        });
    })
})
