var fs = require('fs');
var mkdirp = require('mkdirp');
var path = require('path');
var _ = require("underscore");
var debug = require('debug')('clam:project');
var config = require('./config.js');
var util = require('util');
var hostSwitch = require('./hosts.js');
var http = require('http');

//默认项目配置信息
var initConf = {
  name: '',
  pageext: ["html"],               // html   | vm
  pagedirlevel: ["single"],       // single | multi
  build: ["merge"],                // merge  | combo
  charset: ["gbk", "utf-8"],
  pagesDir: 'src/pages',
  modsDir: 'src/mods',
  widgetsDir: 'src/widgets',
  buildDir: 'build',
  testsDir: 'tests',
  cdnPath: '',
  port: [80, 443],
  urls: {},
  hosts: '',
  hostsMap: {},                    // 域名代理
  json: [],
  filter: {}
};

//用户项目目录
var prjDir = '.';

/**
 * 返回或者设置项目信息
 * 如果传入参数为空，则返回项目信息。
 * 如果传入参数不为空，则设置项目信息。
 * 设置的项目信息最后保存到.clam/project.json中
 * @param dir 某个项目的子孙目录，此参数被用来寻找项目的根目录
 * @param prj 需要设置的项目元数据
 */
exports = module.exports = function (prj) {
  prjDir = config.root();
  debug('项目目录:%s', prjDir);
  var state = prjState(prjDir);
  debug('项目状态:%s', state);
  if (!prj) {
    var info = getProject(prjDir, state);
    return info;
  }

  var actions = [];
  if (state !== 'normal') {
    if (state === 'blank') {
      var pagesFullDir = path.join(prjDir, initConf.pagesDir);
      mkdirp.sync(pagesFullDir);
      actions.push({action: '创建页面目录', content: pagesFullDir});

      var modsFullDir = path.join(prjDir, initConf.modsDir);
      mkdirp.sync(modsFullDir);
      actions.push({action: '创建模块目录', content: modsFullDir});

      var widgetsFullDir = path.join(prjDir, initConf.widgetsDir)
      mkdirp.sync(widgetsFullDir);
      actions.push({action: '创建组件目录', content: widgetsFullDir});

      var buildFullDir = path.join(prjDir, initConf.buildDir);
      mkdirp.sync(buildFullDir);
      actions.push({action: '创建构建目录', content: buildFullDir});

      var testsFullDir = path.join(prjDir, initConf.testsDir);
      mkdirp.sync(testsFullDir);
      actions.push({action: '创建测试目录', content: testsFullDir});
    }
    prj = initConf;
    var dirs = prjDir.split(path.sep);
    prj.name = dirs[dirs.length - 1];
  }


  var oldPrj = config.get('project') || prj;
  if (oldPrj.hosts && prj.hosts && oldPrj.hosts !== prj.hosts) {
    hostSwitch.setHosts(prj.hosts);
    actions.push({action: '更新hosts文件', content: '操作系统hosts文件'});
  }
  for (var k in prj) {
    oldPrj[k] = prj[k];
  }

  config.set('project', oldPrj);
  actions.push({action: '更新项目元文件', content: '.clam/project.json'});

  //getMuiConfig();
  //actions.push({action: '更新项目gconfig文件', content: '.clam/gconfig.json'});

  return {
    succeed: true,
    msg: '更新项目信息',
    data: actions
  };
}
/**
 * 设置cdn的跳转规则
 */
exports.setUrls = function (urls) {
  if (!urls) {
    return {
      succeed: false,
      msg: '更新项目信息',
      data: actions
    };
  }
  prjDir = config.root();
  var prj = config.get('project');
  prj.urls = urls;
  config.set('project', prj);
  config.set('project', prj);
  var actions = [];
  actions.push({action: '更新项目元文件', content: '.clam/project.json'});
  return {
    succeed: true,
    msg: '更新项目信息',
    data: actions
  };
}
/**
 * 获取项目信息
 * @param prjDir 项目根目录
 * @param state  当前项目状态
 * @return {Object} 项目信息
 */
function getProject(prjDir, state) {
  //正常项目的元数据完全从配置文件中获取
  if (state === 'normal') {
    return config.get('project');
  }

  var prjInfo = {
    state: state,
    prjDir: prjDir
  };

  //异常项目的数据从默认配置中复制
  for (var conf in initConf) {
    prjInfo[conf] = initConf[conf];
  }

  var dirs = prjDir.split(path.sep);
  prjInfo.name = dirs[dirs.length - 1];
  return prjInfo;
}

/**
 * 返回项目状态
 * @param root 项目根目录
 * @return {String} normal => 包含.clam目录|past => 不包含.clam且项目目录不为空|blank => 不包含.clam且项目目录为空
 */
function prjState(root) {
  var state = 'normal';
  if (!fs.existsSync(path.join(root, '.clam'))) {
    state = 'past';
    var list = fs.readdirSync(root);
    list = _.filter(list, function (file) {

      return !(/^\..+/.test(file));
    });
    if (list.length === 0) {
      state = 'blank';
    }
  }
  return state;
}

/**
 * 从mui服务器上拉去最新的 globalConfig，在项目创建时自动生成
 */
function getMuiConfig() {
  var remoteUrl = 'http://demo.mui.tmall.net/gitsrc/seed/build/config.json';
  var req = http.request(remoteUrl, function (res) {
    var str = '';
    res.on('data', function (d) {
      str += d;
    });
    res.on('end', function () {
      try {
        config.set('gconfig', JSON.parse(str.toString()));
      }
      catch (e) {
        config.set('gconfig', {});
      }
      process.exit(0);
    });
    res.on('error', function () {
      debug('远程获取gconfig失败！', '');
      process.exit(0);
    });
  });
  req.end();
}
