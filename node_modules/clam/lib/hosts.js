var isUtf8 = require('is-utf8');
var debug = require('debug')('hosts');
var fs = require('fs');
var util = require('util');
var _ = require('underscore');

/*
 * host文件中clam管理的区块
 */
var beginTag = '################ clam config start ################';
var endTag = '################ clam config end ################';
/*
 * 读写 HOSTS 文件,获取换行符格式
 */
var hostFile = (function () {
    var isWin = !!process.platform.match(/^win/);
    var split_char = isWin ? '\r\n' : '\n';
    var charset ;
    var get_file = function () {
        var file_path;
        if (isWin) {
            file_path = 'c:\\windows\\system32\\drivers\\etc\\hosts';
        } else {
            file_path = '/etc/hosts';
        }
        if (fs.existsSync(file_path)) {
            return file_path;
        } else {
            return false;
        }
    };
    charset = isUtf8(fs.readFileSync(get_file())) ? 'utf-8' : 'gbk';
    return {
        get       : function () {
            return fs.readFileSync(get_file(), charset);
        },
        set       : function (str) {
            if (isWin) {
                str = str.replace(/([^\r])\n/g, "$1\r\n");
            }
            debug(get_file());
            fs.writeFileSync(get_file(), str, charset);
        },
        split_char: split_char
    }
})();

var NodeHostManager = (function () {
    var split_char = hostFile.split_char;
    return  (function () {
        try{
            var ip_regx = /^((1?\d?\d|(2([0-4]\d|5[0-5])))\.){3}(1?\d?\d|(2([0-4]\d|5[0-5])))$/;
            // copy from http://forums.intermapper.com/viewtopic.php?t=452
            var ip6_regx = /^((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(%.+)?$/;

            var lines = [];
            var hosts = {};

            var cur_host_content = "";

            var parse_host = function () {

                lines = [];
                hosts = {};
                //read
                var host = hostFile.get();
                var areaReg = new RegExp(beginTag+'[\\s\\S]*?'+endTag+'\\n\\r?', 'g');
                host = host.replace(areaReg, '');
                cur_host_content = host;

                if (host && host.charAt(host.length - 1) != "\n") { //fix no lf
                    host += split_char;
                }

                var l_p = 0; //pointer to line
                var regx = /(.*?)\r?\n/mg;

                while (true) {
                    var l = regx.exec(host);
                    if (!l) {
                        break;
                    }
                    l = l[0];

                    lines[l_p++] = l;

                    l = l.replace(/^(\s*#)+/, "#");
                    l = l.replace(/#/g, " # ");
                    l = l.replace(/^\s+|\s+$/g, "");
                    l = l.replace(/\s+/g, " ");
                    var tks = l.split(" ");
                    var ip;
                    if (ip_regx.test(tks[0]) || ip6_regx.test(tks[0])) {
                        ip = tks[0];
                        tks.splice(0, 1);
                        tks.forEach(function (item,i){
                            if (!hosts[item]) {
                                hosts[item] = {
                                    ip     : ip,
                                    line_no: l_p
                                }
                            }
                        });
                    }
                }
            };
            parse_host();
            var line_disable = function (host_name) {
                if (hosts[host_name]) {
                    lines[hosts[host_name].line_no - 1] = '# ' + lines[hosts[host_name].line_no-1]
                }
            };
            /**
             * 设置项目HOST
             * @param pro_hosts {array} example: ['127.0.0.1 farm1.staticflickr.com  a.tbcdn.cn', '127.0.0.1 kezhan.trip.taobao.com bb.aa.com']
             */
            var set_project_host = function (pro_hosts) {
                if(_.isString(pro_hosts)){
                    pro_hosts = pro_hosts.split(/\n\r?/);
                }
                parse_host();
                lines.push(beginTag + split_char);
                pro_hosts.forEach(function (item, i) {
                    var ip ;
                    item = item.replace(/^\s+|\s+$/g, '');
                    item = item.replace(/\s+/g, ' ');
                    item = item.split(' ');
                    if (ip_regx.test(item[0]) || ip6_regx.test[item[0]]) {
                        ip = item[0];
                        item.splice(0,1);
                        item.forEach(function (_name, _i) {
                            line_disable(_name);
                        });
                        lines.push(ip + ' ' + item.join(' ') + split_char);
                    }
                });
                lines.push(endTag + split_char);

                hostFile.set(lines.join(''));
            };

            /**
             * 恢复HOST并存储
             */
            var restore = function () {
                var host = hostFile.get();
                var areaReg = new RegExp(beginTag+'[\\s\\S]*?'+endTag+'\\r?\\n?', 'g');
                host = host.replace(areaReg, '');
                hostFile.set(host);
            };
            return {
                setHosts : set_project_host,//设置项目HOST
                restore  : restore //恢复原始HOST配置
            };
        }catch(e){
            return {
                setHosts : function(){},//设置项目HOST
                restore  : function(){} //恢复原始HOST配置
            };
        }

    })();
})();

//test
//NodeHostManager.restore();
exports = module.exports = NodeHostManager;