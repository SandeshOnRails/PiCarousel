var joinbuffers = require("joinbuffers");
var isUtf8 = require('is-utf8');
var iconv = require('iconv-lite');
var config = require('./config.js');

var prjInfo = config.get('project');

var http = require('http');
var https = require('https');
var net = require('net');
var debug = require('debug')('Clam:requestHandle');
var _ = require('underscore');

var path = require('path');
var uri = require('url');
var fs = require('fs');

exports = module.exports = function () {
    return function (req, res, next) {        
        var remotes = exports.remotes;
        // no interfaces defined
        if (!remotes || !remotes.length) {
            next();
            return;
        }
        var url = uri.parse(req.url);
        _.some(remotes, function (options) {
            // equals or matched the option pathname 
            if (options.pathname === url.pathname || url.pathname.match(options.pathname)) {
                exports.proxy(req, res, next, options);
                return true;
            }
        }) || next();
    };
};
exports.remotes = [];

// 'https://www.taobao.com:80/a/d/b?a=1&b=2'.match(/^(?:(http(?:s*)|socket):\/\/)*([^\:\/]+)*(?:\:(\d+))*(\/[^?]*)(?:\?(.*))*$/)
// ["https://www.taobao.com:80/a/d/b?a=1&b=2", "https", "www.taobao.com", "80", "/a/d/b", "a=1&b=2"]
// 'socket://www.taobao.com:80/a/d/b?a=1&b=2'.match(/^(?:(http(?:s*)|socket):\/\/)*([^\:\/]+)*(?:\:(\d+))*(\/[^?]*)(?:\?(.*))*$/)
// ["socket://www.taobao.com:80/a/d/b?a=1&b=2", "socket", "www.taobao.com", "80", "/a/d/b", "a=1&b=2"]
// 'socket://www.taobao.com:80/a/d/b?a=1&b=2'.match(/^(?:(http(?:s*)|socket):\/\/)*([^\:\/]+)*(?:\:(\d+))*(\/[^?]*)(?:\?(.*))*$/)
exports._reFullURI = /^(?:(http(?:s*)|socket):\/\/)*([^\:\/]+)*(?:\:(\d+))*(\/[^?]*)(?:\?(.*))*$/;

if (prjInfo && prjInfo.dataApi) {
  _.each(prjInfo.dataApi, function (options) {
    // 接口文件放到
    var local = path.join(config.root(), '/.clam/dataApi/', options.local || '');
    var remote = (options.remote || '').match(exports._reFullURI);
    var type = options.type || 'auto';
    var pathname = options.url;
    if (!pathname || !remote) {
      debug('Failed to build remote %s from %s !', remote, local);
    }
    exports.remotes.push({
      pathname: pathname,
      type: type,
      local: local,
      remote: {
        // http(s) socket
        agreement: remote[1] || 'http',
        domain: remote[2] || 'localhost',
        port: remote[3] || 80,
        pathname: remote[4] || '',
        querystring: remote[5] || ''
      }
    });
  });
}

exports.handle = exports;
exports.proxy = function (req, res, next, options) {
    if (options.type === 'auto' || options.type === 'local') {
        exports._local(req, res, next, options);
    }
    if (options.type === 'remote') {
        exports._remote(req, res, next, options);
    }
};
exports._local = function (req, res, next, options) {
    fs.stat(options.local, function (err, stats) {
        if (!err && stats.isFile()) {
            var action = require(options.local);
            if ('function' === typeof action.handle) {
                action.handle(req, res, next, options);
                return;
            }
            try {
                // 反回的数据不是模块，就认为是json了。只允许两种。推荐直接返回json。
                // 如果会nodejs。直接操作数据。方便。快捷
                res.setHeader('Content-Type', 'application/json;text/json; charset=' + exports.charset);
                res.write(JSON.stringify(action));
                res.end();
            } catch ( e ) {
                debug('Stringify failed! Data: %o \n\r File: %s', action, options.local);
                res.end(JSON.stringify({
                    "errno": 500,
                    "errmsg": "Stringify failed ! Please check your action file : "+options.local+"! "
                }));
            }
            return;
        }
        if (options.type === 'auto') {
            return exports._remote(req, res, next, options);
        }
        return next();
    });
};
exports._remote = function (req, res, next, options) {
    if (options.remote.agreement === 'http') {
        return exports.httpProxy(req, res, next, options);
    }
    if (options.remote.agreement === 'https') {
        return exports.httpsProxy(req, res, next, options);
    }
    if (options.remote.agreement === 'socket') {
        return exports.socketProxy(req, res, next, options);
    }
    debug('Remote failed; Unknown agreement <%s> ', options.agreement);
    next();
};
exports.charset = prjInfo ? prjInfo.charset[0] : "utf-8";
exports.httpProxy = function (req, res, next, options) {
    var remote = options.remote;
    var url = uri.parse(req.url);
    var pathname = remote.pathname || url.pathname;
    var querystring = remote.querystring;
    querystring += (url.query ? '&' : '') + (url.query || '');

    var nsreq = http.request({
        host: remote.domain,
        port: remote.port,
        path: pathname + '?' + querystring,
        method: req.method,
        headers: req.headers
    }, function (nsres) {
        res.statusCode = nsres.statusCode;
        // 返回的数据中头信息确保为对方反馈数据
        var headers = nsres.headers;
        var headerItem;
        var header;
        for (header in headers) {
            headerItem = headers[header];
            res.setHeader(header, headerItem);
        }
        var buffs = [];
        // 收到数据，立刻返回。
        nsres.on('data', function (chunk) {
            buffs.push(chunk);
        });
        // 结束同时关闭此次连接
        nsres.on('end', function () {
            buff = joinbuffers(buffs);
            //fix 80% situation bom problem.quick and dirty
            if(buff[0] === 239 && buff[1] === 187 && buff[2] === 191) {
                buff = buff.slice(3, buff.length);
            }
            var buffChatset = isUtf8(buff) ? 'utf8' : 'gbk';
            if (buffChatset !== exports.charset) {
                buff = iconv.encode(iconv.decode(buff, buffChatset), exports.charset);
            }
            res.write(buff);
            res.end();
        });
    });
    req.on('data', function (chunk) {
       nsreq.write(chunk);
    });
    req.on('end', function () {
       nsreq.end(); 
    });
    nsreq.on('error', function (e) {
        debug(e);
    }); 
};
exports.httpsProxy = function (req, res, next, info) {
    // ? 
};
exports.socketProxy = function (req, res, next, info) {
    // ?
};