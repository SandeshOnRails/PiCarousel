var debug = require('debug')('clam:assetsTool');
var path = require('path');
var parser = require('./dependParser').parser;
var Map = require('./util/map');

// 这行内容适合提取到配置文件中
var SEP = ':', CSS = 'css', JS = 'js', HEAD = 'head', FOOT = 'foot';

var exCss = /\.css/gi;
function getType(content) {
    return content.match(exCss) ? CSS : JS;
}

// DOM渲染器
var renderer = {};
renderer[CSS] = function (url, pos) {
    var str = '<link type="text/css" rel="stylesheet" href="' + url + '" />';
    //console.log(str); // TODO ...
    return str;
};
renderer[JS] = function (url, pos) {
    var str = '<script src="' + url + '" ></script>';
    //console.log(str); // TODO ...
    return str;
};

// $assetsTool API
function AssetsTool() {
    this.map = new Map();
}
AssetsTool.prototype.use = function (content) {
    // css和js分离
    var cssMod = [], jsMod = [];
    var content = content || '';

    content.split(',').forEach(function(m) {
        var type = getType(m);
        type == CSS ? cssMod.push(m): jsMod.push(m);
    });

    var urls = parser.getComboUrls(cssMod).concat(parser.getComboUrls(jsMod)),
        type, ret = '';

    if (typeof urls == 'string') urls = new Array(urls);

    for (var i = 0, l = urls.length; i < l; i++) {
        type = getType(urls[i]);
        ret += renderer[type](urls[i]);
    }
    return ret;
};
AssetsTool.prototype.require = function (content, pos) {
    var self = this;
    content.split(',').forEach(function(m) {
        var type = getType(m);

        var mods = parser.getMods(m);

        // 默认css放到头部，js放到底部
        if (!pos) var pos = (type == CSS) ? HEAD : FOOT;

        self.map.put(type + SEP + (pos || HEAD), mods);
    });
};
AssetsTool.prototype.injectStyle = function () {
    return this._inject(CSS, HEAD);
};
AssetsTool.prototype.injectScript = function (pos) {
    return this._inject(JS, pos);
};
AssetsTool.prototype._inject = function (type, pos) {
    var mods = this.map.get(type + SEP + pos),
        urls = parser.getComboUrls(mods), ret = '';
    for (var i = 0, l = urls.length; i < l; i++) {
        ret += renderer[type](urls[i]);
    }
    return ret;
};
function feLoader(data) {
    var cmd = [];
    data.forEach(function(i){
        cmd.push('{express:' + i['express'] + ', id:"'+ i['id'] + '"}');
    })

    cmd = 'var data = [' + cmd.join(',') + '], ret = [];'
        + 'for (var i = 0, str; i < data.length; i++) {'
        + '    str = data[i]["express"];'
        + '    if (str) {'
        + '        ret.push({'
        + '            express: str,'
        + '            id: data[i]["id"]'
        + '        });'
        + '    }'
        + '}'
        + 'return ret;';

    var fn = new Function('$assetsTool', cmd);
    return fn(new AssetsTool());
}
exports.feLoader = feLoader;

exports.clearCacheMod = parser.clear;
