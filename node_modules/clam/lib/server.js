var project = require('../lib/project.js');

var jsonHandle = require('./jsonHandle.js');
var dataApiHandle = require('./dataApiHandle.js');
var debug = require('debug')('clam:server');
var config = require('./config.js');
var _ = require('underscore');
var fs = require("fs");
var path = require("path");
var util = require("util");
var HOST_NAME = 'clam.com';
var inspector = require('condenser')(HOST_NAME);
var doji = require('doji');
var flexCombo = require("flex-combo");
var essi = require("essi");

exports = module.exports = function (needInject, basePath, port, sport) {
  var config_dir = ".clam";
  ["buildhistory", "mock", "gconfig"].forEach(function (i) {
    var file = path.join(process.cwd(), config_dir, i+".json");
    if (fs.existsSync(file)) {
      fs.unlink(file);
    }
  });

  var absConfDir = path.join(process.cwd(), config_dir);
  if (!fs.existsSync(absConfDir)) {
    fs.mkdirSync(absConfDir);
  }

  var gitignore = path.join(process.cwd(), ".gitignore");
  var ig = fs.existsSync(gitignore) ? fs.readFileSync(gitignore) : null;
  if (!ig || !/\.cache/.test(ig)) {
    fs.appendFile(gitignore, "\n.cache/\n", function () {
      fs.chmod(gitignore, 0777);
    });
  }
  if (!ig || !/node_modules/.test(ig)) {
    fs.appendFile(gitignore, "\nnode_modules/\n", function () {
      fs.chmod(gitignore, 0777);
    });
  }

  var prjInfo = project();

  var ports = [80, 443];
  if (typeof prjInfo.port == "number" || typeof prjInfo.port == "string") {
    ports[0] = parseInt(prjInfo.port);
  }
  else if (util.isArray(prjInfo.port)) {
    ports = prjInfo.port;
  }

  var hostsInfo = prjInfo.hosts;
  if (typeof hostsInfo != "undefined") {
    hostsInfo += '\n127.0.0.1 ' + HOST_NAME;
    var hostsArr = hostsInfo.split(/[\n\r]{1,}/g);
    var hostsObj = {};
    var tmp;
    for (var i = 0; i < hostsArr.length; i++) {
      tmp = hostsArr[i].split(/\s{1,}/g);
      if (tmp.length >= 2) {
        if (!hostsObj[tmp[0]]) {
          hostsObj[tmp[0]] = [];
        }
        for (var j = 1; j < tmp.length; j++) {
          hostsObj[tmp[0]].push(tmp[j]);
        }
      }
    }
    var fhConfFile = path.join(absConfDir, "flex-hosts.json");
    if (!fs.existsSync(fhConfFile)) {
      fs.writeFileSync(fhConfFile, JSON.stringify(hostsObj, null, 2));
      fs.chmod(fhConfFile, 0777);
    }
  }

  var essiConf = essi.config;
  var essiFlag = false;
  var cdnPath = prjInfo.cdnPath;
  if (cdnPath) {
    essiConf.cdnPath = cdnPath;
    essiFlag = true;
  }
  var essiCharset = prjInfo.charset;
  if (essiCharset && essiCharset[0]) {
    essiConf.charset = essiCharset[0];
    essiFlag = true;
  }

  var essiConfFile = path.join(absConfDir, "essi.json");
  if (essiFlag && !fs.existsSync(essiConfFile)) {
    fs.writeFileSync(essiConfFile, JSON.stringify(essiConf, null, 2));
    fs.chmod(essiConfFile, 0777);
  }

  var fcConf = flexCombo.config;
  var fcFlag = false;
  var fcCharset = prjInfo.charset;
  if (fcCharset && fcCharset[1]) {
    fcConf.charset = essiCharset[1];
    fcFlag = true;
  }
  var fcUrls = prjInfo.urls;
  if (fcUrls) {
    fcConf.urls = fcUrls;
    fcFlag = true;
  }
  var fcdefine = prjInfo.define;
  if (fcdefine) {
    if (!fcConf['dac/tpl']) {
      fcConf['dac/tpl'] = {filter:{}};
    }
    fcConf['dac/tpl'].define = fcdefine;
    fcFlag = true;
  }
  var fcanonymous = prjInfo.anonymous;
  if (fcanonymous) {
    if (!fcConf['dac/tpl']) {
      fcConf['dac/tpl'] = {filter:{}};
    }
    fcConf['dac/tpl'].anonymous = fcanonymous;
    fcFlag = true;
  }
  var fcConfFile = path.join(absConfDir, "flex-combo.json");
  if (fcFlag && !fs.existsSync(fcConfFile)) {
    fs.writeFileSync(fcConfFile, JSON.stringify(fcConf, null, 2));
    fs.chmod(fcConfFile, 0777);
  }

  var plugBase = require("plug-base");
  plugBase.root(basePath ? basePath : "src");
  plugBase.config(config_dir);
  plugBase
    .use(doji.PACHandle())
    .use(inspector)
    .use(dataApiHandle())
    .use(jsonHandle.json(prjInfo))
    .plug(require("flex-combo"), {filter:{
      '\\/\\$CLAM_VER\\$': ''
    }})
    .plug(require("essi"))
    .listen(port || ports[0] || 80, sport || ports[1] || 443);

  var clamApp = plugBase.app;
  var clamServer = plugBase.http;
  var proxyInfo = _.extend({
    port: 9000,
    dojiDir: '',
    urls: {},
    hosts: {},
    filters: {},
    parsers: [],
    timestamp: false,
    widgets: {}
  }, prjInfo.proxy);

  if (needInject) {
    proxyInfo.parsers.unshift(function (buffer, proxyRes, req) {
      debug('Now inject the inspector for mobile');
      return inspector.inject(buffer, req.serverIP);
    });
    inspector.connect(clamServer);
  }

  var proxyApp = doji(proxyInfo);
  config.on('projectChange', function () {
    proxyApp.config(config.get('project').proxy || {});
  });
  proxyApp.listen(proxyInfo.port);
  proxyApp.on('req:start', function (req) {
    console.log('=> Proxy request method: \x1B[32m%s\x1B[39m path: \x1B[34m%s\x1B[39m', req.method, req.url);
  });
  proxyApp.on('proxy:circle', clamApp);
  proxyApp.on('proxy:local', clamApp);

  var ignore = ["name", "charset", "dataApi", "port", "json"];
  for (var k in prjInfo) {
    if (ignore.indexOf(k) == -1) {
      delete prjInfo[k];
    }
  }
  var prjFile = path.join(process.cwd(), config_dir, "project.json");
  fs.writeFile(prjFile, JSON.stringify(prjInfo, null, 2), function () {
    fs.chmod(prjFile, 0777);
  });
};
