var prj = require('./project.js');
var fs = require('fs');
var path = require('path');
var walk = require('./util/walk.js');
var _ = require('underscore');
var J = require("juicer");
var conf = require('./config.js');
var debug = require('debug')('clam:mod');
var templateCenter = require('./template.js');
var mkdirp = require('mkdirp');
var iconv = require('iconv-lite');

var config = {
    metaDir: '.clam',
    metaFile : 'mod.json',
    suffix : ['vm', 'php', 'html'],
    templateDir : "../resource/mod/",
    assetsDir : "assets",
    coreName : "core",
    coreTemplate:"../resource/mod/core",
    headTemplate:"../resource/mod/head"
};
var appDir = path.resolve(__dirname);

J.set("strip", false);
/**
 * 返回modsDir中所有的模块，递归的，返回所有子目录的模块。
 * 模块以config.suffix中所标识的扩展名结束
 * 如果，目录结构如下：
 *  mods/a/a.vm
 *  mods/a/b/b.vm
 *
 * 应该解析2个模块，分别叫做a/a.vm 和 a/b/b.vm 每一个.vm都是一个模块
 * 每个.vm应对应一个同名.css及.js文件，不强制要求有css和js文件。
 * 限定模块的css和js文件必须小余一定规模，比如500行。这么做的目的是为了鼓励拆分模块中复杂逻辑到widget中。
 *
 * 返回的模块名在.clam/mods.json中有额外信息记录。比如description。
 */
exports.list = function() {
    var prjInfo = prj();

    var modsDir = path.join(conf.root(), prjInfo.modsDir);
    var metaFile = path.join(conf.root(), config.metaDir, config.metaFile);
    var modsFiles = walk.walkSync(modsDir);
    modsFiles = _.filter(modsFiles, function(file) {
        return _.any(config.suffix, function(value) {
            // 改为直接用后缀名判断，防止.vm.swp 这类文件混入
            var fileSuffix = file.match(/.*\/.*\.(\w+)$/)[1];
            return fileSuffix == value;
        });
    });
    //console.log(modsFiles);
    //conf.root() + prjInfo.dir
    var metaInfo = conf.get('mod');

    var info = _.map(modsFiles, function(file) {
        var fileName = file.slice(modsDir.length+1, file.length);
        var modName = file.slice(modsDir.length+1, file.lastIndexOf('.'));
        var description = '';
        if(metaInfo){
            description = metaInfo[modName] ? metaInfo[modName].description : '';
        }

        return {
            name : modName,
            file : fileName,
            description : description
        };
    });
    return {succeed:true,
        msg:'获取模块信息',
        data:info
    };
}

/**
 * 创建模块，就是创建一个文件夹，及模块下对应的文件。
 * 1、模块一定存在于一个包中，不能直接放置到mods目录下
 * 2、默认情况下，模块被创建一个同名目录中。
 * 3、可以创建子模块。
 *
 * 创建的模块如果有额外信息，需要记录到.clam/mods.json中
 * 创建的模块，需要有额外注释，描述模块名。
 *
 * 未来，创建模块时，可以选择基于某模板创建，比如活动页面的模块。
 */
var addMod = exports.add = function(modName, description, template) {
    var prjInfo = prj();
    var actions = [];
    
    //只支持几种扩展名，并且默认一个模块必须在子目录中
    var modFileName = computeExt(modName);
    if(modFileName.split('/').length === 1){
        var modNameSet = modFileName.replace(/\..*$/, '');
        modFileName = modNameSet + '/' + modFileName;
    }
    debug(modFileName);
    //如果存在相同模块报错
    var modFilePath = path.join(conf.root(), prjInfo.modsDir, modFileName);
    if (fs.existsSync(modFilePath)) {
        return {
            succeed: false,
            msg: '已存在相同的模块，创建模块失败。',
            data: modFilePath
        };;
    }

    //创建模块HTML文件目录
    var modDir = path.join(modFilePath, '..');
    mkdirp.sync(modDir);

    //修改目录权限为775
    var modDepsdirs = modFileName.split('/');
    var dir = '', j = 0;
    for(var i = 0; i < modDepsdirs.length-1; i++){
        dir = path.join(conf.root(), prjInfo.modsDir);
        j = 0;
        while(j <= i ){
            dir = path.join(dir, modDepsdirs[j]);
            j++;
        }
        debug('修改目录权限%s', dir);
        fs.chmodSync(dir,'775');
    }

    //取得模板路径
    if(!template){
        template = 'default';
    }
    var userHome = process.env.HOME || process.env.HOMEPATH;//兼容windows
    var templateDir = path.join(userHome, '.clamconfig/templates', template,'mod');
    if(!fs.existsSync(templateDir)){
        return {
            succeed: false,
            msg: '模板'+template+'不存在',
            data: ''
        };
    }

    //转换模板
    var bn = modDepsdirs[modDepsdirs.length-1];
    var baseModName = path.basename(bn, path.extname(bn));
    var modInfo = {
        name: baseModName,
        description: description
    };
    var param = {project: prjInfo, mod: modInfo};
    templateCenter.convert(templateDir, modDir, param, baseModName);

    //记录模块元信息
    var metaInfo = conf.get('mod');
    if(!metaInfo){
        metaInfo = {};
    }

    metaInfo[modFileName.replace(/\.(html)$/,'')] = modInfo;
    conf.set('mod', metaInfo);
    actions.push({action:'更新模块元信息', content: '.clam/mod.json'});

    //完成创建后执行回调
    return {
        succeed: true,
        msg: '模块创建',
        data: actions
    };
}

/**
 * 删除模块
 */
exports.del = function (data) {
    var prjInfo = prj();
    var dirName = path.dirname(data.name);
    var fileName = path.basename(data.name);
    var modDir = path.join(conf.root(), prjInfo.modsDir, dirName);
    var modPath = path.join(conf.root(), prjInfo.modsDir, dirName, fileName+'.'+prjInfo.pageext[0]);
    var actions = [];
    if(!fs.existsSync(modPath)){
        return {
            succeed:false,
            msg:modPath+"文件不存在"
        }
    }
    //删除页面文件
    fs.unlinkSync(modPath);
    actions.push({action:'删除文件', content: modPath});
    //检查该文件夹下是否还有文件，如果没有的话就删掉
    var list = fs.readdirSync(modDir);
    list = _.filter(list,function(file){
        return _.any(config.suffix, function(value) {
            return file.lastIndexOf(value) !== -1;
        });
    });
    if(list.length==0){
        walk.rmrfSync(modDir);
        actions.push({action:'删除文件目录', content: modDir});
    }
    return {succeed:true,
        msg:'删除页面',
        data:actions
    };
    
}

/**
 * 创建core模块
 */
exports.addCore = function(){
    var prjInfo = prj();
    var name = config.coreName;
    //添加核心模块
    addMod({
        name:name,
        description:"项目核心模块，包含一些不依赖任何库的JS方法和页头页尾等通用模块",
        addjs:true,
        addcss:true,
        jsns:prjInfo.jsns
    },{
        templateDir : config.coreTemplate
    });
    //添加头<head>内容模块
    addMod({
        name:name+"/head",
        description:"项目页面head标签部分内容",
        addjs:false,
        addcss:false
    },{
        templateDir : config.headTemplate
    });
}

//设置模块文件的扩展名，如果不是以下列表的，就改为.vm
function computeExt(str) {
    var prjInfo = prj();
    if ((/\.(vm|php|html|htm)$/).test(str)) {
        return str;
    }
    return str.replace(/\..*$/, "") + '.' + prjInfo.pageext[0];
}
/*
function writeFile(path,str){
    var prjInfo = prj();
    var c = iconv.encode(str,prjInfo.charset[0]);
    fs.writeFileSync(path, c);
    fs.chmodSync(path, "777");
}*/
