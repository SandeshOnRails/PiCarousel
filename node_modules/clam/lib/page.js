var fs = require('fs');
var path = require('path');
var mkdirp = require('mkdirp');
var J = require("juicer");
var walk = require('./util/walk.js');
var _ = require('underscore');
var iconv = require('iconv-lite');
var conf = require('./config.js');
var util = require('util');
var debug = require('debug')('clam:page');
var templateCenter = require('./template.js');

var config = {
    metaDir: '.clam',
    suffix:['vm', 'php' , 'html'],
    metaFile:'page.json',
    templateDir:"../resource/page",
    template:'template.html'
};

J.set("strip", false);
/**
 * 返回pages目录中的page,pageDir目录中的page需要递归获取。
 *
 * 如目录结果如下：
 * tuipiao/index.html
 * tuipiao/xxxReason/suceed.html
 * tuipiao/xxxReason/suceed.html
 * 应该返回三个页面，分别为这三个页面的全路经。
 *
 * 根据每个返回页面名获取页面额外信息，如：上线后URL
 * 每个页面可以默认有一个同名js、css文件。
 *
 * page [js/css/img/header]
 * mod  [js/css/img]
 * widget
 *
 */
exports.list = function () {
    var prjInfo = conf.get('project');
    var root = conf.root();
    var pageDir = path.join(root, 'src');
    var metaFile = path.join(root, config.metaDir, config.metaFile);
    var pageFiles = walk.walkSync(pageDir);

    //过滤掉非html文件
    var filter_page = new RegExp(path.join(root, prjInfo.pagesDir).replace(/\\/g, '/')+".+\\.html$"),
        filter_root = new RegExp(path.join(root, prjInfo.pagesDir+"/..").replace(/\\/g, '/')+"/([^\/]*?)\\.html$");
    pageFiles = _.filter(pageFiles, function (file) {
        if (file.match(filter_page)) {
            return true;
        }
        else {
            return file.match(filter_root) ? true : false;
        }
    });
    debug('页面%s', util.inspect(pageFiles));
    pageFiles = pageFiles.sort(function (a, b) {
        return a < b;
    });
    var metaInfo = conf.get('page');
    var info = _.map(pageFiles, function (file) {
        var pageName = file.slice(pageDir.length+1, file.lastIndexOf('.'));
        var pageFileName = file.slice(pageDir.length+1, file.length);
        var description = '';
        var onlineurl = '';
        var pagelib = '';
        if(metaInfo){
            description = metaInfo[pageName] ? metaInfo[pageName].description : '';
            onlineurl = metaInfo[pageName] ? metaInfo[pageName].url : '';
            pagelib = metaInfo[pageName] ? metaInfo[pageName].lib : '';
        }

        return {
            name: pageName,
            file: pageFileName,
            description: description,
            url: onlineurl,
            lib: pagelib,
            fileExt: 'html'
        };
    });
    return {
        succeed:true,
        msg:'获取页面信息',
        data:info
    };
}

/**
 * 创建页面
 * 页面创建时要根据所选框架(jquery/yui/kissy)，按照模板生成页面。
 * info 格式如下：
  {
    "url":"abcde/abc",
    "name":"abab/ddd",
    "description":"cdcd",
    "lib":["KISSY", "JQUERY", "YUI"]
   }
 */
function add(name, url, description, template) {
    var prjInfo = conf.get('project');
    var root = conf.root();
    var metaFile = path.join(root, config.metaDir, config.metaFile);
    var actions = [];

    var pageFileName = computeExt(name);
    
    /**
     * 处理单页页面目录和多层页面目录结构，单层结构的都加上
     */

    var pagePath = path.join(root, prjInfo.pagesDir, pageFileName);
    
    if (fs.existsSync(pagePath)) {
        return {succeed:false,
            msg:'存在相同的页面，创建页面失败。',
            data:pagePath
        };
    }
    console.log("Creating page:"+pagePath);

    //创建模块HTML文件目录
    var pageDir = path.join(pagePath, '..');
    mkdirp.sync(pageDir);

    //修改目录权限为775
    var pageDepsdirs = pageFileName.split('/');
    var dir = '', j=0;
    for(var i = 0; i < pageDepsdirs.length-1; i++){
        dir = path.join(conf.root(), prjInfo.pagesDir);
        j   = 0;
        while(j <= i ){
            dir = path.join(dir, pageDepsdirs[j]);
            j++;
        }
        debug('修改目录权限%s', dir);
        fs.chmodSync(dir,'775');
    }

    //取得模板路径
    if(!template){
        template = 'default';
    }
    var userHome = process.env.HOME || process.env.HOMEPATH;//兼容windows
    var templateDir = path.join(userHome, '.clamconfig/templates', template,'page');
    if(!fs.existsSync(templateDir)){
        return {
            succeed: false,
            msg: '模板'+template+'不存在',
            data: ''
        };
    }

    //转换模板
    var bn = pageDepsdirs[pageDepsdirs.length-1];
    var pageName = path.basename(bn, path.extname(bn));
    var pageInfo = {
        name: pageName,
        url: url,
        description: description
    };
    debug('变量信息:%s', util.inspect(pageInfo));
    var param = {project: prjInfo, page: pageInfo};
    templateCenter.convert(templateDir, pageDir, param, pageName);

    actions.push({action:'创建页面', content: pagePath});

    //记录page元信息
    var metaInfo = conf.get('page');
    if(!metaInfo){
        metaInfo = {};
    }

    metaInfo[pageFileName.replace(/\.(html)$/,'')] = pageInfo;
    conf.set('page', metaInfo);
    actions.push({action:'更新页面元信息', content: metaFile});

    return {
        succeed: true,
        msg: '创建页面',
        data: actions
    };
}

exports.add = add;

/**
 * 修改页面对应的url
 */
exports.update = function () {

}

/**
 * 删除页面
 */
exports.del = function (data) {
    var prjInfo = conf.get('project');
    var root = conf.root();
    var dirName = path.dirname(data.name);
    var fileName = path.basename(data.name);
    var pageDir = path.join(root, 'src', dirName);
    var pagePath = path.join(root, 'src', dirName, fileName + '.html');
    var actions = [];
    //删除页面文件
    fs.unlinkSync(pagePath);
    actions.push({action:'删除页面文件', content: pagePath});
    //检查该文件夹下是否还有文件，如果没有的话就删掉
    var list = fs.readdirSync(pageDir);
    if(list.length==0 && path.basename(pageDir) != path.basename('src')){
        fs.rmdirSync(pageDir);
        actions.push({action:'删除页面文件目录', content: pagePath});
    }
    return {succeed:true,
        msg:'删除页面',
        data:actions
    };
}

//设置页面文件的扩展名，如果不是以下列表的，就改为.vm
function computeExt(str) {
    if ((/\.(html)$/).test(str)) {
        return str;
    }
    //return str.replace(/\..*$/, "") + '.html';
    return str + ".html";
}

//获取页面信息
function makePageParam(info) {
    var cssBase, jsBase, data;
    var prjInfo = conf.get('project');

    var libPath = {
        JQUERY:"jquery",
        ZEPTO:"zepto",
        KISSY:"s/kissy/1.3.0rc/kissy-min.js",
        YUI:"s/yui/3.5.1/build/yui/yui-min.js",
        SEAJS:"seajs"
    };

    //页面的lib为空的话则取项目的lib
    var jsLib = (info.lib && info.lib.length) > 0 ? info.lib : prjInfo.lib;

    //处理css reset路径
    cssBase = "http://a.tbcdn.cn/??p/global/1.0/global-min.css";

    //处理js库
    jsBase = "http://a.tbcdn.cn/??";
    _.each(jsLib, function (v, i) {
        jsBase += libPath[v] + ","
    });
    jsBase = jsBase.slice(0, -1);
    data = {
        cssBase:cssBase,
        jsBase:jsBase,
        title:prjInfo.description,
        description:info.description,
        pageext: 'html',
        charset: prjInfo.charset[0]
    };
    //console.log(JSON.stringify(data));
    return data
}
/*
function writeFile(path,str){
    var prjInfo = conf.get('project');
    var c = iconv.encode(str,prjInfo.charset[0]);
    fs.writeFileSync(path, c);
    fs.chmodSync(path, "777");
}*/
