var prj = require('./project.js');
var fs = require('fs');
var path = require('path');
var walk = require('./util/walk.js');
var _ = require('underscore');
var J = require("juicer");
var conf = require('./config.js');
var templateCenter = require('./template.js');
var debug = require('debug')('widget');

J.set("strip", false);
var mkdirp = require('mkdirp');

var config = {
    metaDir: '.clam',
    metaFile : 'widget.json',
    templateDir : "../resource/widget/",
    mainFile : 'index.js',
    mainCss : 'style.css'
};

/**
 * 返回widgetDir中所有的组件，组件是平的，只有一级。
 * 组件根据目录名列出
 * 目录结构如下：
 *  widgets/a/index.js
 *  widgets/a/style.css
 * 
 */
exports.list = function() {
    var prjInfo = prj();

    var widgetsDir = path.join(conf.root(), prjInfo.widgetsDir);
    var metaFile = path.join(conf.root(), config.metaDir, config.metaFile);
    var widgets = fs.readdirSync(widgetsDir);
    
    //获取widgets目录下所有文件夹
    widgets = _.filter(widgets, function(file) {
        return fs.statSync(path.join(widgetsDir,file)).isDirectory()
    });
    
    //console.log(widgets);
    
    
    //获取组件元数据
    var metaInfo = {};
    try {
        var metaStr = fs.readFileSync(metaFile);
        metaInfo = JSON.parse(metaStr);
    } catch(e) {
        metaInfo = {};
    }
    
    //console.log(metaInfo);
    
    //分析组件数据
    var info = _.map(widgets, function(widgetName) {
        var description = metaInfo[widgetName] ? metaInfo[widgetName].description : '';
        return {
            name : widgetName,
            description : description
        };
    });
    
    
    return {succeed:true,
        msg:'获取模块信息',
        data:info
    };
}


/**
 * 创建组件，就是创建一个文件夹，及模块下对应的文件。
 * 组件目录结构是单层的，只要有一个文件夹以及主js文件，以及可选的样式文件即可
 *
 * 创建的组件如果有额外信息，需要记录到.clam/widget.json中
 * 创建的组件，需要有额外注释，描述组件名。
 * {
 *     name:"",
 *     description:"",
 *     addcss:true
 * }
 */
exports.add = function(widgetName, description, template) {
    var prjInfo = prj();
    var actions = [];

    //如果存在相同模块报错
    var widgetDirPath = path.join(conf.root(), prjInfo.widgetsDir, widgetName);
    if (fs.existsSync(widgetDirPath)) {
        return {
            succeed: false,
            msg: '已存在相同的组件，创建模块失败。',
            data: widgetDirPath
        };
    }

    //创建模块HTML文件目录
    mkdirp.sync(widgetDirPath);

    //修改目录权限为775
    var widgetDepsdirs = widgetName.split('/');
    var dir = '', j = 0;
    for(var i = 0; i < widgetDepsdirs.length-1; i++){
        dir = path.join(conf.root(), prjInfo.widgetsDir);
        j = 0;
        while(j <= i ){
            dir = path.join(dir, widgetDepsdirs[j]);
            j++;
        }
        debug('修改目录权限%s', dir);
        fs.chmodSync(dir,'775');
    }

    //取得模板路径
    if(!template){
        template = 'default';
    }
    var userHome = process.env.HOME || process.env.HOMEPATH;//兼容windows
    var templateDir = path.join(userHome, '.clamconfig/templates', template, 'widget');
    if(!fs.existsSync(templateDir)){
        return {
            succeed: false,
            msg: '模板'+template+'不存在',
            data: ''
        };
    }

    //转换模板
    var widgetBaseName = path.basename(widgetName);
    var widgetInfo = {
        name: widgetBaseName,
        description: description
    };
    var param = {project: prjInfo, widget: widgetInfo};
    templateCenter.convert(templateDir, widgetDirPath, param, widgetBaseName);

    //记录模块元信息
    var metaInfo = conf.get('widget');
    if(!metaInfo){
        metaInfo = {};
    }

    metaInfo[widgetName] = widgetInfo;
    conf.set('widget', metaInfo);
    
    actions.push({action:'更新组件元信息', content: ''});
    
    //完成创建后执行回调
    return {
        succeed: true,
        msg: '组件创建',
        data: actions
    };
}

/**
 * 删除组件
 */
exports.del = function (data) {
    var prjInfo = prj();
    var dirName = data.name;
    var widgetDir = path.join(conf.root(), prjInfo.widgetsDir, dirName);
    var actions = [];
    if(!fs.existsSync(widgetDir)){
        return {
            succeed:false,
            msg:"文件不存在"
        }
    }
    //检查该文件夹下是否还有文件，如果没有的话就删掉
    walk.rmrfSync(widgetDir);
    actions.push({action:'删除文件目录', content: widgetDir});

    return {succeed:true,
        msg:'删除组件',
        data:actions
    };
    
}
/*
function writeFile(path,str){
    var prjInfo = prj();
    var c = iconv.encode(str,prjInfo.charset[0]);
    fs.writeFileSync(path, c);
    fs.chmodSync(path, "777");
}*/
