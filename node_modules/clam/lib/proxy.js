var http = require("http");
var joinbuffers = require("joinbuffers");
var isUtf8 = require('is-utf8');
var iconv = require('iconv-lite');
var config = require('./config.js');

var prjInfo = config.get('project');

var green  = '\u001b[32m';
var red    = '\u001b[31m';
var blue   = '\u001b[34m';
var gray   = '\u001b[37m';
var yellow = '\u001b[33m';
var reset  = '\u001b[0m';

function cosoleResp(type, c){
    if(type == "Need"){
        console.log('%s=>Need     : %s%s%s  %s',green, reset, blue, c, reset);
        return;
    }
    if(type == 'Not found'){
        console.log('%s<=Not found: %s%s%s  %s',red, reset, gray, c, reset);
        return;
    }
    if(type == 'Actually'){
        console.log('%s   Actually: %s%s%s  %s',green, reset, gray, c, reset);
        return;
    }
    if(type == 'Remote'){
        console.log('%s<=Remote   : %s%s%s  %s',green, reset, gray, c, reset);
        return;
    }
    console.log(green+'<='+type+': ' + reset + gray + ' ' + c + ' ' + reset);
    return;
}
function isBinFile(fileName){
    fileName = fileName.split('?')[0];
    return !/.js$|.css$|.less$/.test(fileName);
}
function adaptCharset(buff, outCharset, charset){
    if (charset === outCharset) {
        return buff;
    }

    return iconv.encode(iconv.decode(buff, charset), outCharset);
}

exports.fetch = function(url, host, callback) {
    var filteredUrl = url,
        requestOption = {
            path: url,
            host: host,
            port: 80,
            agent: false
        };

    callback = typeof callback == "function" ? callback : function(code){console.log(code);};

    http.get(requestOption, function(resp) {
        var buffs = [];
        if (resp.statusCode !== 200) {
            var headerHost = requestOption.host;
            cosoleResp('Not found', requestOption.host + requestOption.path + ' (host:'+ reset + yellow + headerHost + reset + ')');
            callback('File ' + requestOption.host + requestOption.path + ' not found.', 404);
            return;
        }
        resp.on('data', function(chunk) {
            buffs.push(chunk);
        });
        resp.on('end', function() {
            var buff = joinbuffers(buffs);

            //fix 80% situation bom problem.quick and dirty
            if(buff[0] === 239 && buff[1] === 187 && buff[2] === 191) {
                buff = buff.slice(3, buff.length);
            }
            if(isBinFile(filteredUrl)){
                cosoleResp('Remote', requestOption.host + requestOption.path);
                callback(buff, 200);
                return;
            }
            cosoleResp('Remote', requestOption.host + requestOption.path);
            var charset = isUtf8(buff) ? 'utf8' : 'gbk';
            var outputCharset = prjInfo.charset[0];

            callback(adaptCharset(buff, outputCharset, charset), 200);
            return;
        });
    }).on('error',function() {
        callback('404 Error, File not found.', 404);
        return;
    });
}
