{
  "_from": "clam",
  "_id": "clam@1.0.12",
  "_inBundle": false,
  "_integrity": "sha1-gM/UESH5aNISBmlYEX8rbK21D3c=",
  "_location": "/clam",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "clam",
    "fetchSpec": "latest",
    "name": "clam",
    "raw": "clam",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/clam/-/clam-1.0.12.tgz",
  "_shasum": "80cfd41121f968d212066958117f2b6cadb50f77",
  "_shrinkwrap": null,
  "_spec": "clam",
  "_where": "/Users/siddhant/Desktop/csc648-su18-Team03-sirfeedsalot",
  "author": {
    "name": "Wayfind"
  },
  "bin": {
    "clam": "./bin/clam"
  },
  "bundleDependencies": false,
  "dependencies": {
    "commander": "~1.0.5",
    "condenser": "~0.0.15",
    "cpr": "~0.1.1",
    "debug": "~0.7.0",
    "doji": "~0.1.6",
    "essi": "~0.10.26",
    "flex-combo": "~0.12.20",
    "iconv-lite": "~0.4.11",
    "is-utf8": "~0.2.0",
    "joinbuffers": "~0.1.1",
    "juicer": "~0.6.11",
    "less": "1.6.0",
    "mime": "~1.2.7",
    "mkdirp": "~0.3.4",
    "plug-base": "~0.9.4",
    "send": "0.1.0",
    "underscore": "~1.4.2",
    "update-notifier": "~0.3.1"
  },
  "deprecated": false,
  "description": "A full Web front end develop envirment.",
  "devDependencies": {},
  "directories": {
    "test": "tests"
  },
  "keywords": [
    "commandline",
    "frontend",
    "toolchain"
  ],
  "license": "BSD",
  "main": "index.js",
  "name": "clam",
  "optionalDependencies": {},
  "readme": "## `Clam` 是什么\n\n`Clam`是一套基于 [Node.js](http://www.nodejs.org) 的前端工程项目开发环境（支持HTTP和HTTPS）。\n\n`Clam`内部集成了本地开发服务器、前端模块化开发管理等功能。`Clam`志在为前端工程师提供更简单和一致的项目开发体验。\n\n## `Clam` 的安装\n\n安装`Clam`最简单的方式是通过 [Node.js](http://www.nodejs.org) 提供的包管理工具`npm`来安装：\n\n    npm -g install clam\n    \n    # Mac 和 Linux 环境下可能需要 sudo 权限\n    # 注意：Windows 平台下请使用原生命令行环境，不要在 Cygwin 下安装。\n\n## 开始使用 `Clam`\n\n`Clam`的使用非常简单，首先需要新建一个空的项目目录，例如`hello_clam`：\n\n    mkdir hello_clam\n    cd hello_clam\n\n然后在此目录下执行`Clam`的项目初始化命令：\n\n    clam init\n\n这条命令会在项目目录下生成一套标准的`Clam`项目目录结构：\n\n    hello_clam\n        - build\n        - src\n            - pages\n            - mods\n            - widgets\n        - tests\n        - .clam\n            - project.json\n\n    # src:      项目源文件目录，包括 html 模板、样式、脚本、图片资源等；\n    # tests:    项目测试脚本；\n    # build:    项目打包发布上线的目标文件；\n    # .clam:    项目元信息，project.json 为项目配置文件。\n\n其中在**项目开发阶段核心工作目录是`src`**。其目录结构对应了`Clam`提供的一套标准的前端模块化开发架构（基于Page，Module，Widget的分层模块开发，具体参考`Clam`模块化开发章节）。\n\n对于一个简单的项目，只需将所有文件都丢到`pages`目录，并以相对路径在`html`文件里引入所需样式和脚本即可，只需要一个简单的配置项`cdnPath`：\n\n    # 在项目配置文件 .clam/project.json 里修改 cdnPath\n    \"cdnPath\": \"http://yourcdn.com/yourproject\"\n    \n    # >> 这样项目打包时就会将相对路径替换为指定的`cdnPath`\n    # 注意：结尾不要附加斜杠\n\n至此使用`Clam`就完成了一个最基本的前端项目的开发。\n\n关于`Clam`提供的更多功能：\n\n- 本地资源文件代理（支持`combo`功能）\n- 接口模拟\n- 模块化开发管理\n- 打包和发布管理\n- 项目 Hosts 管理\n- 基于模板创建页面和模块\n\n强烈推荐继续阅读。\n\n## `Clam` 本地文件代理\n\n`Clam` 本地文件代理提供了一个方便调试测试或线上问题的机制。其工作原理很简单，当你需要调试一个测试或线上页面如`hello_clam.html`时，首先找到该页面所属的项目`hello_clam`。确保已经配置了项目的`cdnPath`，并将文件服务器域名指向本机：\n\n    # 在 hosts 文件中将文件服务器指向本机\n    127.0.0.1 yourcdn.com\n\n然后开启或切换到此项目的 Clam 环境：\n\n    cd hello_clam\n    clam on\n\n注： Mac、Linux下需加sudo\n\n此时再访问 `hello_clam.html` 页面时，`Clam` 内置的本地服务器会将此文件所引用的样式和脚本资源替换为该项目目录的源文件。\n\n*Tips~ 对于手机端检测FPS，手势和console.log的处理可以用 `clam on wap` 进行注入。并在电脑端打开http://clam.com进行查看数据*\n\n值得一提的是`Clam`的文件代理功能提供了`combo`支持，其中默认支持的`combo`格式以`?`作为`servlet`，以`,`作为文件分隔符。如果需要定制`combo`，可以到用户根目录的`~/.flex-combo/config.json`配置文件里更改`flex-combo`的配置。\n\n> `flex-combo`是一个提供本地`combo`服务的`Node.js`模块。  \n> `Clam`本身的`combo`功能也是基于此模块实现的。  \n> 关于`flex-combo`的详细信息参见 [flex-combo官方文档](http://npmjs.org/flex-combo)。\n\n## `Clam` 接口模拟\n\n依托于`Node.js`，`Clam`提供了方便且强大的接口模拟能力。\n\n- 通过` dataApi `方式进行本地自动代理。模拟接口。enabled参数分别为 ` auto ` ` local ` ` remote ` \n- 若设置为` auto `则为自动查找模式。优先本地查找。本地文件对应目录为 ` ${root}/.clam/dataApi `\n- dataApi如果` exports.handle `存在，并且是一个函数。则认定用户需要自助解决数据返回情况。其它认为反回数据为` json `\n- 参数` remote ` 由以往的域名模式改为完整地址模式。 匹配正则为\n\n```\n// 'https://www.taobao.com:80/a/d/b?a=1&b=2'.match(/^(?:(http(?:s*)|socket):\\/\\/)*([^\\:\\/]+)*(?:\\:(\\d+))*(\\/[^?]*)(?:\\?(.*))*$/)\n// [\"https://www.taobao.com:80/a/d/b?a=1&b=2\", \"https\", \"www.taobao.com\", \"80\", \"/a/d/b\", \"a=1&b=2\"]\n// 'socket://www.taobao.com:80/a/d/b?a=1&b=2'.match(/^(?:(http(?:s*)|socket):\\/\\/)*([^\\:\\/]+)*(?:\\:(\\d+))*(\\/[^?]*)(?:\\?(.*))*$/)\n// [\"socket://www.taobao.com:80/a/d/b?a=1&b=2\", \"socket\", \"www.taobao.com\", \"80\", \"/a/d/b\", \"a=1&b=2\"]\n// 'socket://www.taobao.com:80/a/d/b?a=1&b=2'.match(/^(?:(http(?:s*)|socket):\\/\\/)*([^\\:\\/]+)*(?:\\:(\\d+))*(\\/[^?]*)(?:\\?(.*))*$/)\n```\n> 目前仅支持`http`，`https`和`socket`等待完善中。\n\n```\n\"dataApi\" : [\n    {\n        \"url\":      \"/api/fake_api\",    // 需要模拟的接口路径\n        \"enabled\":  \"local\",            // 转发到远程服务器或者本地处理\n        \"remote\":   \"http://remotehost.com:9023/s/a?a=1&b=2\",   // 远程服务器\n        \"local\":    \"local_a.js\"        // 本地处理脚本\n    },\n    {\n        \"url\":      \"/api/\",            // 需要模拟的接口路径\n        \"enabled\":  \"remote\",           // 转发到远程服务器或者本地处理\n        \"remote\":   \"remotehost.com\",   // 远程服务器\n        \"local\":    \"local_b.js\"        // 本地处理脚本\n    }\n]\n```\n其中`url`是需要匹配的接口路径（最长路径匹配）；`enabled`用来控制接口本地处理还是做远程转发；`remote`和`local`字段分别指定了远程转发服务器地址和本地处理脚本的文件名。本地处理脚本需要放置在项目的`.clam/json/`目录下。\n\n假如此时项目请求`/api/fake_api`接口，`Clam`将调用`.clam/json/local_a.js`处理；若请求`/api/another_fake_api`则`Clam`会将此请求转发到远程服务器`remotehost.com`上。\n\n本地处理脚本使用`Node.js`内置的`http`模块来实现，它提供了一个接收`http request`和`http response`对象参数的处理函数：\n\n    exports = module.exports = function(req, res){\n        res.end('this is a fake api response~')\n        return true\n    }\n    \n关于此函数的详细用法请参考`Node.js`官方文档的`http`模块部分。\n\n## `Clam` 代理配置\n在` .clam `目录下的 `project.json` 中增加了一个 `proxy` 的配置项。关于此配置项的详细说明请参考：[Doji配置](https://github.com/mo-tools/doji/blob/master/README-zh.md)\n\n## `Clam` 模块化开发\n\n除了一系列的贴心功能外，`Clam`还非常激进的提供了从底层架构层面对于前端模块化开发的支持。先来了解一下`Clam`对于前端项目的理解。\n\n传统上前端工作里“项目”的概念远没有后台软件开发领域里那么清晰，这主要是由于以往的客户端页面较简单，不需要太多“项目”层面的支持。随着现在客户端功能的越趋复杂，有必要系统的来引入一套针对前端业务特点构建的架构模式。\n\n`Clam`里对于项目的定义是一个完整的前端应用，或其中一个相对独立的某一个业务场景。如：一个单页富应用，可以作为一个`Clam`项目；或者业务耦合度较高，用户使用路径很近的一组页面，也可以作为一个`Clam`项目。\n\n对于一个`Clam`项目的具体页面，除了页面自身的`html`模板，样式和脚本外，它还可以引用一组模块，其中每个模块都有其独立的`html`模板，样式和脚本文件。同时页面上还可以存在一些通用的组件，如下图所示：\n\n![image](http://img01.taobaocdn.com/tps/i1/T19aJSFj4fXXa8cdbY-936-711.png)\n\n- 一个`Clam`项目由若干页面`Page`、模块`Module`、和组件`Widget`构成；\n- 其中`Page`和`Module`可以由`html`，`css`，`js`等组成；`Widget`则不应包含`html`；\n- `Page`可以在其`html`里包含`Module`的`html`文件来使用模块；通过静态包含或动态加载使用`Widget`；\n- `Module`通常是与业务关系较密切的独立功能块，比如一个订票网站的常用联系人模块；\n- `Module`应做到尽可能独立，最理想的情况是完全独立于页面；\n- `Widget`是与具体业务耦合较松，复用性更强的功能块，如日历组件；\n- `Page`的`html`部分通常是用来包含模块`html`或为组件提供容器的。\n\n要使用一个模块很简单，只需在页面`html`里引用模块`html`即可，拿我们的`hello_clam`项目做例子，我们目前的项目目录结构为：\n\n    hello_clam\n        - build\n        - src\n            - pages\n                - home.html\n                - home.css\n                - home.js\n            - mods\n                - say_hello\n                    - say_hello.html\n                    - say_hello.css\n                    _ say_hello.js\n                - contact\n                    - contact.html\n                    - contact.css\n                    - contact.js\n            - widgets\n        - tests\n        - .clam\n            - project.json\n\n其中`home.html`内容为：\n\n    <html>\n        <head>\n            <title>hello clam</title>\n            <link rel=\"stylesheet\" href=\"home.css\" />\n            <script type=\"text/javascript\" src=\"home.js\"></script>\n        </head>\n        <body>\n            <h1>hello clam!</h1>\n            <!--#include file=\"/mods/say_hello/say_hello.html\"-->\n        </body>\n    </html>\n\n`say_hello.html`内容为：\n\n    <link rel=\"stylesheet\" href=\"say_hello.css\" />\n    <script type=\"text/javascript\" src=\"say_hello.js\"></script>\n    <p>Hello! Dear Clam User!</p>\n\n现在启动`Clam`后就可以在浏览器里输入`127.0.0.1/home.html`，可以看到`home.html`页面为嵌入了`say_hello.html`的内容：\n\n    <html>\n        <head>\n            <title>hello clam</title>\n            <link rel=\"stylesheet\" href=\"home.css\" />\n            <script type=\"text/javascript\" src=\"home.js\"></script>\n        </head>\n        <body>\n            <h1>hello clam!</h1>\n            <link rel=\"stylesheet\" href=\"say_hello.css\" />\n            <script type=\"text/javascript\" src=\"say_hello.js\"></script>\n            <p>Hello! Dear Clam User!</p>\n        </body>\n    </html>\n\n### `clam` 动态内容生成\n\n你可以在页面和模块中使用[Juicer](http://juicer.name)语法，避免大量重复代码出现。\n可以使用`#def`语法定义一个变量。在def后面的JSON格式数据（格式请严格按照JSON格式编写）。\n\n\t<!--#def \t{\"a\":[1,2,3]，\"b\":{data:[1,2,3]} -->\n\n默认情况下创建的数据的**作用域**只限定与**本模板执行环境**中。只要你愿意你可以把数据通过以下语法传递给子模板，引入子模板有两种语法格式（完整/简易）。\n\n写法：\n\n\t<!--#include data='{\"b\":${b}}' file=\"/mods/mod.html\"-->\n\n数据源的写法也分为两种：\n\n1. 如上例展示的，直接写在#def中定义的JSON数据的key，该写法需要注意的是，传递给子模块的数据的类型必须为Object\n2. 在数据源位置以key / value的形式重新定义，使用$符表示引用#def中定义的JSON数据，无$则以普通字符串的形式传入子模块，该写法对数据类型无要求\n\n#### 例子\n\ntemplate.html\n\t\n\t<!--#def {\"data\":[1,2,3],\"data2\":{\"data\":[1,2,3]}} -->\n\t{@each data as item,index}\n\t\t<div>data:${item},index:${index}</div>\n\t{@/each}\n\t<!--#include \"sub-template.html\" \"data2\"-->\n    \nsub-template.html\n\t\n    <h2>this is sub template</h2>\n    {@each data as item,index}\n    \t<div>data:${item},index:${index}</div>\n    {@/each}\n\noutput\n\n\t<div>data:1,index:0</div>\n    <div>data:2,index:1</div>\n    <div>data:3,index:2</div>\n    <h2>this is sub template</h2>\n    <div>data:1,index:0</div>\n    <div>data:2,index:1</div>\n\t<div>data:3,index:2</div>\n\n### `clam` 引用远程HTML代码\n写法：\n\n\t<!--#remote url=\"http://foo.com/path/to/bar.html\"-->\n\n### `clam` 特殊标签属性\n\n#### fe-move\n该属性用于外联js的script标签中，以提示clam解析时，将该外联js文件引入放于页面的何处。共有2种属性值：top | bottom\n\n写法：\n\n\t<script type=\"text/javascript\" src=\"xxx.js\" fe-move=\"top|bottom\"></script>\n\n属性值解释：\n\n\ttop：放于<head></head>的头部\n\tbottom：放于</body>之前\n\n#### fe-group\n对assets进行combo\n\n写法：\n\n\t<script type=\"text/javascript\" src=\"xxx.js\" fe-group=\"cc\"></script>\n\t<script type=\"text/javascript\" src=\"yyy.js\" fe-group=\"cc\"></script>\n\t\n\t=>\n\t\n\t<script type=\"text/javascript\" src=\"~/??xxx.js,yyy.js\"></script>",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git@gitlab.alibaba-inc.com:aaa/clam.git"
  },
  "scripts": {
    "test": "mocha tests/test.js"
  },
  "version": "1.0.12"
}
