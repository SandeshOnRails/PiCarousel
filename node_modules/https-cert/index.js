"use strict";

const PATH  = require("path");
const FS    = require("fs");
const forge = require("node-forge");

const KEYPAIR = forge.pki.rsa.generateKeyPair({bits: 1024, e: 0x10001});

const CACERTPATH = PATH.join(__dirname, "ca/rootCA.crt");
const CAKEYPATH  = PATH.join(__dirname, "ca/rootCA.key");

const CACERT = FS.readFileSync(CACERTPATH, "utf8");
const CAKEY  = FS.readFileSync(CAKEYPATH, "utf8");

const CACERTOBJ = forge.pki.certificateFromPem(CACERT);
const CAKEYOBJ  = forge.pki.privateKeyFromPem(CAKEY);
const signSync = function (domain) {
  let subject = [
    {
      name: "commonName",
      value: domain
    },
    {
      name: "countryName",
      value: "CN"
    },
    {
      shortName: "ST",
      value: "ZJ"
    },
    {
      name: "localityName",
      value: "HZ"
    },
    {
      name: "organizationName",
      value: "Alibaba"
    },
    {
      shortName: "OU",
      value: "FE"
    }
  ];

  // 生成证书签发请求
  let csr = forge.pki.createCertificationRequest();

  csr.publicKey = KEYPAIR.publicKey;
  csr.setSubject(subject);
  csr.sign(KEYPAIR.privateKey, forge.md.sha256.create());

  // 签发证书
  let cert = forge.pki.createCertificate();

  let md5 = forge.md.md5.create();
  md5.update(domain);
  cert.serialNumber = md5.digest().toHex();

  let notBefore = new Date();
  notBefore.setFullYear(notBefore.getFullYear() - 1);
  cert.validity.notBefore = notBefore;

  let notAfter = new Date();
  notAfter.setFullYear(notAfter.getFullYear() + 1);
  cert.validity.notAfter = notAfter;

  cert.setSubject(csr.subject.attributes);
  cert.setIssuer(CACERTOBJ.subject.attributes);

  // Chrome 58后需要证书中包含subjectAltName(SAN)等信息
  cert.setExtensions([
    {
      name: "basicConstraints",
      cA: false
    },
    {
      name: "keyUsage",
      digitalSignature: true,
      nonRepudiation: true,
      keyEncipherment: true,
      dataEncipherment: true
    },
    {
      name: "subjectKeyIdentifier",
      value: "hash"
    },
    {
      name: "authorityKeyIdentifier",
      keyid: "always",
      issuer: "always"
    },
    {
      name: "subjectAltName",
      altNames: [
        {
          type: 2,
          value: domain
        }
      ]
    }
  ]);

  cert.publicKey = csr.publicKey;
  cert.sign(CAKEYOBJ, forge.md.sha256.create());
  return {
    key: forge.pki.privateKeyToPem(KEYPAIR.privateKey),
    cert: forge.pki.certificateToPem(cert)
  };
};

module.exports = {
  root: CACERT,
  path: CACERTPATH,
  sign: function(domain, cb) {
    const rst = signSync(domain);
    cb(null, rst.key, rst.cert);
  },
  signSync: signSync
};
